{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Transformer Thermal Model","text":""},{"location":"#welcome-to-transformer-thermal-model","title":"Welcome to Transformer Thermal Model","text":"<p><code>transformer-thermal-model</code> is a library for modelling the transformer top-oil and hot-spot temperature based on the transformer specifications, a load profile and an ambient temperature profile. The model is an implementation according to the standard IEC 60076-7, also known as de Loading Guide.</p>"},{"location":"#features","title":"Features","text":"<p>The Transformer Thermal model is designed to model the heat generation in transformers using a simple Python API. In short, it has the following features:</p> <ul> <li>Creating a power or distribution transformer based on user specifications or IEC prescribed specifications;</li> <li>model the heat generation based on a static or dynamic load profile and ambient temperature profile;</li> <li>calculate the aging based on the hot-spot temperature;</li> <li>perform hot-spot factor, being one of the transformer specifications, calibration;</li> <li>calculate the relative component capacities.</li> </ul>"},{"location":"#example-of-a-model-of-a-power-transformer","title":"Example of a model of a power transformer","text":"<p>This example demonstrates how the heat generation in a power transformer is calculated.</p> <p>The required information is:</p> <ul> <li>The load: For example the load [A] during a week.</li> <li>The ambient temperature: The temperature during the same period as the load.</li> <li>The transformer specifications: The minimal required specifications are the cooling type, the load losses, the nominal current at the secondary side, and the temperature surcharge to compensate for building the transformer might be placed in.</li> </ul> <p>Now we will calculate transformer temperatures using <code>transformer_thermal_model.model</code> and some simulated ambient temperature and loads.</p> <pre><code>import pandas as pd\n\nfrom transformer_thermal_model.model import Model\nfrom transformer_thermal_model.cooler import CoolerType\nfrom transformer_thermal_model.schemas import UserTransformerSpecifications, InputProfile\nfrom transformer_thermal_model.transformer import PowerTransformer\n\n# In this example the model is used to calculate the transformer temperature based on a load and ambient\n# profile with a period of one week. Any duration can be chosen preferably with timestamps with an interval of\n# 15 minute or lower. Larger timesteps will result in incorrect results but it *is* possible to calculate with them.\none_week = 4*24*7\ndatetime_index = pd.date_range(\"2020-01-01\", periods=one_week, freq=\"15min\")\n\n# For the load (in A) and ambient temperature (in C) arbitrary constants profiles are chosen.\n# It is also possible to use a realistic profile.\nnominal_load = 100\nload_points = pd.Series([nominal_load] * one_week, index=datetime_index)\nambient_temp = 21\ntemperature_points = pd.Series([ambient_temp] * one_week, index=datetime_index)\n\n# Create an input object with the profiles\nprofile_input = InputProfile.create(\n   datetime_index = datetime_index,\n   load_profile = load_points,\n   ambient_temperature_profile = temperature_points\n)\n\n# Initialise a power transformer with cooling type ONAF and, besides the mandatory user specifications, default values.\ntr_specs = UserTransformerSpecifications(\n   load_loss=1000,  # Transformer load loss [W]\n   nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]\n   no_load_loss=200,  # Transformer no-load loss [W]\n   amb_temp_surcharge=20,  # Ambient temperature surcharge [K]\n)\ntransformer = PowerTransformer(user_specs=tr_specs, cooling_type=CoolerType.ONAF)\nmodel = Model(\n   temperature_profile = profile_input,\n   transformer = transformer\n)\n\nresults = model.run()\n\n# Get the results as pd.Series, with the same datetime_index as your input.\ntop_oil_temp_profile = results.top_oil_temp_profile\nhot_spot_temp_profile = results.hot_spot_temp_profile\n</code></pre> <pre><code>&gt;&gt;&gt; top_oil_temp_profile.head(3)\n2020-01-01 00:00:00    41.000000\n2020-01-01 00:15:00    43.639919\n2020-01-01 00:30:00    45.801302\n\n&gt;&gt;&gt; hot_spot_temp_profile.head(3)\n2020-01-01 00:00:00    41.000000\n2020-01-01 00:15:00    44.381177\n2020-01-01 00:30:00    46.443459\n</code></pre>"},{"location":"#who-is-using-the-transformer-thermal-model","title":"Who is using the Transformer Thermal Model?","text":"<p>The Transformer Thermal Model is designed with three major cases in mind:</p> <ul> <li>Modelling the top-oil temperature: to elevate our understanding on how to take maximal use of a transformer,    we want to know if we can increase the load without damaging the asset with higher temperatures. If a transformer    is not equipped with a top-oil sensor already, adding one to an operational transformer is not straightforward,    so a model providing us with an estimate of this value is highly appreciated.</li> <li>Modelling the hot-spot temperature: the hot-spot measurement has proven to be even more interesting in    measuring the state of a transformer under load and this information required to estimate the aging.    Some transformers are equipped with an hot-spot temperature sensor. But if this is not the case, one can use    this model to calculate an estimate of this temperature from the top-oil measurements.</li> <li>Creating awareness within the company: all these values together we use to combine into one important metric:   the aging of the transformer. We want our transformers to stay in the field for as long as we estimated when   purchasing it. If we start increasing the load on these transformers, we do not want them defecting sooner than   expected. To show that we can confidently increase the load on certain transformers, we use the Transformer Thermal   Model together with measurements from the field to empower our decisions to comfortably increase the load on specific   assets.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Mozilla Public License, version 2.0 - see LICENSE for details.</p>"},{"location":"#licenses-third-party-libraries","title":"Licenses third-party libraries","text":"<p>This project includes third-party libraries, which are licensed under their own respective Open-Source licenses. SPDX-License-Identifier headers are used to show which license is applicable.</p> <p>The concerning license files can be found in the LICENSES directory.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Please read CODE_OF_CONDUCT, CONTRIBUTING and PROJECT GOVERNANCE for details on the process for submitting pull requests to us.</p>"},{"location":"#contact","title":"Contact","text":"<p>Please read SUPPORT for how to connect and get into contact with the Transformer Thermal Model project.</p>"},{"location":"model_input/","title":"Model input","text":""},{"location":"model_input/#model-input","title":"Model input","text":"<p>The thermal model requires four inputs:</p> <ol> <li>Relevant transformer specifications</li> <li>Load profile</li> <li>Ambient temperature profile</li> <li>Initial value hot-spot and top-oil temperature</li> </ol>"},{"location":"model_input/#relevant-transformer-specifications","title":"Relevant transformer specifications","text":"<p>Below are all transformer-specific properties that influence the thermal behavior of the transformer:</p>"},{"location":"model_input/#nominal-secondary-current","title":"Nominal secondary current","text":"<ul> <li> <p>Unit: Amp\u00e8re.</p> </li> <li> <p>Description: The nominal current on the secondary side of the transformer. When the transformer carries this current on the secondary side, we refer to it as 100% loading of the transformer.</p> </li> <li> <p>Source: Nameplate on the transformer or Factory Acceptance Test (FAT) report.</p> </li> <li> <p>Fallback/guarantee value: n/a (always known)</p> </li> </ul>"},{"location":"model_input/#no-load-loss","title":"No-load loss","text":"<ul> <li>Unit: Watt.</li> <li>Description: The no-load loss refers to the losses within a transformer that are always present when the transformer is energized, even when there is no load connected to the transformer. These losses occur in the core of the transformer, which is magnetized by the alternating current. For this reason, they are also called iron losses or core losses. These losses mostly translate into heat, making this parameter an important thermal property.</li> <li>Source:  Factory Acceptance Test (FAT) report: during these tests, a no-load test is performed to determine these losses. This test is conducted individually for each transformer.</li> <li>Fallback/guarantee value: This value is usually known.</li> </ul>"},{"location":"model_input/#short-circuit-loss","title":"Short-circuit loss","text":"<ul> <li>Unit: Watt.</li> <li>Description: The short-circuit loss is the counterpart of the no-load loss. This type of loss is load-dependent and represents the losses in the windings due to resistance. For this reason, they are also called copper losses. These losses are quadratically dependent on the current.</li> <li>Source: Factory Acceptance Test (FAT) report: during these tests, a short-circuit test is performed to determine the short-circuit losses at a nominal short-circuit current. This test is conducted individually for each transformer.</li> <li>Fallback/guarantee value: This value is usually known.</li> </ul>"},{"location":"model_input/#top-oil-temperature-rise","title":"Top-oil temperature rise","text":"<ul> <li>Unit: Kelvin.</li> <li>Description: The top-oil temperature is the temperature at the top of the transformer. During a heating test of the transformer, this temperature is measured under nominal and constant load. The top-oil temperature rise indicates how much the temperature of the top-oil rises above the ambient temperature when it stabilizes under these nominal conditions.</li> <li> <p>Source: Factory Acceptance Test (FAT) report: during these tests, a temperature-rise test is performed on the transformer. Often, this test is only performed for one transformer per series. If the information is not available for a specific transformer, a temperature-rise test of a comparable transformer can be used.</p> </li> <li> <p>Fallback/guarantee value: If no temperature-rise test is available for any transformer in the series, the guaranteed value of the top-oil temperature rise can be used. For all modern transformers, this is 60 Kelvin. For very old transformers, this can sometimes fall back to 55 or 50 Kelvin. These guaranteed values can always by found on the type plate.</p> </li> </ul>"},{"location":"model_input/#winding-oil-gradient","title":"Winding-oil gradient","text":"<ul> <li>Unit: Kelvin.</li> <li>Description: To determine the temperature drop between the winding and the oil, the winding-oil gradient is an important thermal property of a transformer. This can also be determined during a temperature-rise test by taking the difference between the average oil temperature rise and the average winding temperature rise.</li> <li>Source: Factory Acceptance Test (FAT) report: during these tests, a temperature-rise test is performed on the transformer. Often, this test is only performed for one transformer per series. If the information is not available for a specific transformer, a comparable transformer can be used.</li> <li>Fallback/guarantee value: The average oil temperature rise is not always known from a heating test. In that case, the average oil temperature rise can be estimated at 80% of the top-oil temperature rise. If the average winding temperature rise is not known, the guarantee value can be used. For all modern transformers, this is 65 Kelvin. For very old transformers, this can sometimes fall back to 60 or 55 Kelvin. Assuming a 60 Kelvin top-oil temperature rise and a 65 Kelvin average winding temperature rise, a gradient of 17 Kelvin can be assumed (gradient = (average winding temperature) - 0.8*(top-oil temperature)).</li> </ul>"},{"location":"model_input/#hot-spot-factor","title":"Hot-spot factor","text":"<ul> <li>Unit: unitless.</li> <li> <p>Description: The hot-spot factor, together with the gradient, indicates the difference between the hot-spot temperature and the top-oil temperature.</p> </li> <li> <p>Source: Factory Acceptance Test (FAT) report: during these tests, a temperature-rise test is performed on the transformer. Often, this test is only performed for one transformer per series. If the information is not available for a specific transformer, a comparable transformer can be used.</p> </li> <li> <p>Fallback/guarantee value: The hot-spot factor is often not known from the temperature-rise test. In that case, the worst-case hot-spot factor of 1.3 can be used. It is generally expected that the hot-spot factor ranges between 1.1 and 1.3. Whether these are indeed the most extreme limits is not certain. It should be noted that for older transformers, the hot-spot factor can be much higher. This is due to the use of solid wire, where eddy current losses in the upper regions of the windings are higher than with modern CTC wire (= continuously transposed conductor).</p> </li> <li> <p>Hot-spot factor calibration: The hot-spot factor can be calibrated using the model. For more information, see Hot-spot factor calibration.</p> </li> </ul>"},{"location":"model_input/#cooling-type","title":"Cooling type","text":"<ul> <li>Unit: n/a</li> <li> <p>Description: The transformer can generally be cooled in two ways:</p> </li> <li> <p>ONAN: Oil Natural, Air Natural. In this type of transformer, both the flow of the oil and the flow of the   air along the radiators are natural. The oil is heated, rises, and is pushed into the radiators without actively   forcing this flow to appear. The oil then cools in the radiators, sinks down, and is pushed into the oil tank. The air   between the radiators is heated and rises. This creates a natural airflow along the radiators.</p> </li> <li> <p>ONAF: Oil Natural, Air Forced. The difference with ONAN is that fans are placed under the radiators. These   force an active airflow between the radiators. This allows the oil to more easily transfer its heat to the   environment.</p> </li> <li> <p>Source: Nameplate on the transformer.</p> </li> <li> <p>Fallback/guarantee value: n/a</p> </li> </ul>"},{"location":"model_input/#ambient-temperature-surcharge","title":"Ambient temperature surcharge","text":"<ul> <li>Unit: Kelvin.</li> <li>Description: This parameter is used differently for distribution and power transformers:</li> <li>Power transformers: For this type of transformer it is expected to be placed outside. In that case, this     parameter should be set to 0 and does nothing. In some cases, however, power transformers are placed inside. In that     situation, it is more difficult for the heat to escape the surroundings of the transformer. Therefore, a 10 Kelvin     temperature surcharge can be filled in here, which will be added to the ambient temperature to compensate for this     phenomenon. Other values can of course also be chosen.</li> <li>Distribution transformers: Distribution transformers are (in the Netherlands) always placed inside. Still, a     distinction can be made between compact and normal stations. As the name suggests, compact stations have a lot less     free space, which means the surroundings heat up a lot quicker. To take this phenomenon into account a temperature     surcharge can be added to the rated top-oil temperature rise, which is also a transformer specification.</li> <li>Source:: n/a</li> <li>Fallback/guarantee value: n/a</li> </ul>"},{"location":"model_input/#relevant-constants-for-winding-and-oil","title":"Relevant constants for winding and oil","text":"<p>The transformer model uses several constants that characterize the thermal behavior of the windings and the oil in the transformer. Values for these constants can be experimentally determined. The loading guide also recommends some conservative values for these constants (IEC 60076-7, Table 4):</p> <ul> <li> <p>Oil exponent x: Determines how the top-oil temperature depends on the load level and the losses of the transformer.</p> </li> <li> <p>Winding exponent y: Determines how the gradient depends on the load level of the transformer.</p> </li> <li> <p>Oil constant \\(k_{11}\\): Empirical model parameter.</p> </li> <li> <p>Winding constant \\(k_{21}\\): Empirical model parameter.</p> </li> <li> <p>Winding constant \\(k_{22}\\): Empirical model parameter.</p> </li> <li> <p>Oil time constant \\(\u03c4_o\\):  the tau time in minutes for the oil. This number governs the rate at which the oil reaches its final temperature.</p> </li> <li> <p>Winding time constant \\(\u03c4_w\\): the tau time in minutes for the winding. This number governs the rate at with which the windings reach their final temperature.</p> </li> </ul>"},{"location":"api_reference/aging/","title":"Aging","text":""},{"location":"api_reference/aging/#aging","title":"Aging","text":"<p>The aging of the transformer under a certain load (described by the hot-spot temperature(s)) can be calculated with the following functions.</p>"},{"location":"api_reference/aging/#transformer_thermal_model.aging.aging.aging_rate_profile","title":"aging_rate_profile","text":"<pre><code>aging_rate_profile(\n    hot_spot_profile: Series,\n    insulation_type: PaperInsulationType,\n) -&gt; Series\n</code></pre> <p>The aging rate profile of the provided paper insulation material.</p> <p>Given a hot-spot temperature profile, calculate the days aged for each time step in the profile. Given a hot-spot temperature profile, calculate the days aged for each time step in the profile.</p> <p>Parameters:</p> Name Type Description Default <code>hot_spot_profile</code> <code>Series</code> <p>The hot-spot temperature profile of the transformer.</p> required <code>insulation_type</code> <code>PaperInsulationType</code> <p>The type of paper insulation material.</p> required Calculating the aging rate profile for a hot-spot temperature profile. <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; from transformer_thermal_model.aging import aging_rate_profile\n&gt;&gt;&gt; from transformer_thermal_model.transformer import PaperInsulationType\n\n&gt;&gt;&gt; datetime_index = pd.date_range(\"2020-01-01\", periods=10, freq=\"15min\", tz=\"UTC\")\n&gt;&gt;&gt; hot_spot_profile = pd.Series([100] * 10, index=datetime_index)\n&gt;&gt;&gt; profile = aging_rate_profile(hot_spot_profile, PaperInsulationType.NORMAL)\n&gt;&gt;&gt; print(profile)\n2020-01-01 00:00:00+00:00    1.259921\n2020-01-01 00:15:00+00:00    1.259921\n2020-01-01 00:30:00+00:00    1.259921\n2020-01-01 00:45:00+00:00    1.259921\n2020-01-01 01:00:00+00:00    1.259921\n2020-01-01 01:15:00+00:00    1.259921\n2020-01-01 01:30:00+00:00    1.259921\n2020-01-01 01:45:00+00:00    1.259921\n2020-01-01 02:00:00+00:00    1.259921\n2020-01-01 02:15:00+00:00    1.259921\nFreq: 15min, dtype: float64\n</code></pre> <p>Returns:</p> Type Description <code>Series</code> <p>pd.Series: Aging in day/day over time.</p> Source code in <code>transformer_thermal_model/aging/aging.py</code> <pre><code>def aging_rate_profile(hot_spot_profile: pd.Series, insulation_type: PaperInsulationType) -&gt; pd.Series:\n    \"\"\"The aging rate profile of the provided paper insulation material.\n\n    Given a hot-spot temperature profile, calculate the days aged for each time step in the profile.\n    Given a hot-spot temperature profile, calculate the days aged for each time step in the profile.\n\n    Args:\n        hot_spot_profile (pd.Series): The hot-spot temperature profile of the transformer.\n        insulation_type (PaperInsulationType): The type of paper insulation material.\n\n    Example: Calculating the aging rate profile for a hot-spot temperature profile.\n        ```python\n        &gt;&gt;&gt; import pandas as pd\n        &gt;&gt;&gt; from transformer_thermal_model.aging import aging_rate_profile\n        &gt;&gt;&gt; from transformer_thermal_model.transformer import PaperInsulationType\n\n        &gt;&gt;&gt; datetime_index = pd.date_range(\"2020-01-01\", periods=10, freq=\"15min\", tz=\"UTC\")\n        &gt;&gt;&gt; hot_spot_profile = pd.Series([100] * 10, index=datetime_index)\n        &gt;&gt;&gt; profile = aging_rate_profile(hot_spot_profile, PaperInsulationType.NORMAL)\n        &gt;&gt;&gt; print(profile)\n        2020-01-01 00:00:00+00:00    1.259921\n        2020-01-01 00:15:00+00:00    1.259921\n        2020-01-01 00:30:00+00:00    1.259921\n        2020-01-01 00:45:00+00:00    1.259921\n        2020-01-01 01:00:00+00:00    1.259921\n        2020-01-01 01:15:00+00:00    1.259921\n        2020-01-01 01:30:00+00:00    1.259921\n        2020-01-01 01:45:00+00:00    1.259921\n        2020-01-01 02:00:00+00:00    1.259921\n        2020-01-01 02:15:00+00:00    1.259921\n        Freq: 15min, dtype: float64\n\n        ```\n\n    Returns:\n        pd.Series: Aging in day/day over time.\n    \"\"\"\n    return hot_spot_profile.apply(_aging_rate_method(insulation_type))\n</code></pre>"},{"location":"api_reference/aging/#transformer_thermal_model.aging.aging.days_aged","title":"days_aged","text":"<pre><code>days_aged(\n    hot_spot_profile: Series,\n    insulation_type: PaperInsulationType,\n) -&gt; float\n</code></pre> <p>Number of days the insulation material inside the transformer has aged.</p> <p>Calculates the number of days the provided insulation material has aged given the hot-spot temperature profile. For a more accurate representation of the number of days aged per timestep of the provided hot-spot temperature profile, see :func:<code>aging_rate_profile</code>.</p> <p>Parameters:</p> Name Type Description Default <code>hot_spot_profile</code> <code>Series</code> <p>The hot-spot temperature profile of the transformer.</p> required <code>insulation_type</code> <code>PaperInsulationType</code> <p>The type of paper insulation material.</p> required Calculating the number of days aged across the entire profile. <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; from transformer_thermal_model.aging import days_aged\n&gt;&gt;&gt; from transformer_thermal_model.transformer import PaperInsulationType\n\n&gt;&gt;&gt; one_day = 24 * 4 + 1\n&gt;&gt;&gt; datetime_index = pd.date_range(\"2020-01-01\", periods=one_day, freq=\"15min\", tz=\"UTC\")\n&gt;&gt;&gt; hotspot_profile = pd.Series(100, index=datetime_index)\n&gt;&gt;&gt; total_aging = days_aged(hotspot_profile, PaperInsulationType.NORMAL)\n&gt;&gt;&gt; print(total_aging)\n1.26\n</code></pre> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The total aging in days for the period of the given temperature profile.</p> Source code in <code>transformer_thermal_model/aging/aging.py</code> <pre><code>def days_aged(hot_spot_profile: pd.Series, insulation_type: PaperInsulationType) -&gt; float:\n    \"\"\"Number of days the insulation material inside the transformer has aged.\n\n    Calculates the number of days the provided insulation material has aged\n    given the hot-spot temperature profile. For a more accurate representation\n    of the number of days aged per timestep of the provided hot-spot temperature\n    profile, see :func:`aging_rate_profile`.\n\n    Args:\n        hot_spot_profile (pd.Series): The hot-spot temperature profile of the transformer.\n        insulation_type (PaperInsulationType): The type of paper insulation material.\n\n    Example: Calculating the number of days aged across the entire profile.\n        ```python\n        &gt;&gt;&gt; import pandas as pd\n        &gt;&gt;&gt; from transformer_thermal_model.aging import days_aged\n        &gt;&gt;&gt; from transformer_thermal_model.transformer import PaperInsulationType\n\n        &gt;&gt;&gt; one_day = 24 * 4 + 1\n        &gt;&gt;&gt; datetime_index = pd.date_range(\"2020-01-01\", periods=one_day, freq=\"15min\", tz=\"UTC\")\n        &gt;&gt;&gt; hotspot_profile = pd.Series(100, index=datetime_index)\n        &gt;&gt;&gt; total_aging = days_aged(hotspot_profile, PaperInsulationType.NORMAL)\n        &gt;&gt;&gt; print(total_aging)\n        1.26\n\n        ```\n\n    Returns:\n        float: The total aging in days for the period of the given temperature profile.\n    \"\"\"\n    aging_profile = hot_spot_profile.apply(_aging_rate_method(insulation_type))\n    seconds_aged = aging_profile.index.to_series().diff().dt.total_seconds().fillna(0)\n    total_seconds_aged = (aging_profile * seconds_aged).sum()\n    total_days_aged = total_seconds_aged / (60 * 60 * 24)  # convert seconds to days\n\n    logger.info(f\"Total aging: {total_days_aged} days\")\n    return total_days_aged\n</code></pre>"},{"location":"api_reference/components/","title":"Components","text":""},{"location":"api_reference/components/#components","title":"Components","text":"<p>Some components need to be specified in the <code>PowerTransformer</code>. This page lists the various components.</p>"},{"location":"api_reference/components/#transformer_thermal_model.components.bushing_config.BushingConfig","title":"BushingConfig","text":"<p>               Bases: <code>StrEnum</code></p> <p>The bushing configuration of a transformer.</p> <p>Each bushing configuration has a different capacity calculation method that is used in the <code>PowerTransformer</code> class. The configuration can be provided using the <code>ComponentSpecifications</code> class when initializing a <code>PowerTransformer</code>.</p> <p>Attributes:</p> Name Type Description <code>SINGLE_BUSHING</code> <code>str</code> <p>A single bushing configuration.</p> <code>DOUBLE_BUSHING</code> <code>str</code> <p>A double bushing configuration.</p> <code>TRIANGLE_INSIDE</code> <code>str</code> <p>A triangle inside configuration.</p>"},{"location":"api_reference/components/#transformer_thermal_model.components.transformer_side.TransformerSide","title":"TransformerSide","text":"<p>               Bases: <code>StrEnum</code></p> <p>The possible side a component can be connected to in a transformer.</p> <p>A transformer has two sides, the primary and secondary side. The primary side is the side where the transformer is connected to the power source, while the secondary side is the side where the transformer is connected to the load.</p> <p>Attributes:</p> Name Type Description <code>PRIMARY</code> <code>str</code> <p>The primary side of the transformer.</p> <code>SECONDARY</code> <code>str</code> <p>The secondary side of the transformer.</p>"},{"location":"api_reference/components/#transformer_thermal_model.components.vector_config.VectorConfig","title":"VectorConfig","text":"<p>               Bases: <code>StrEnum</code></p> <p>Vector configuration of a transformer.</p> <p>Attributes:</p> Name Type Description <code>STAR</code> <code>str</code> <p>Star configuration.</p> <code>TRIANGLE_INSIDE</code> <code>str</code> <p>Triangle inside configuration.</p> <code>TRIANGLE_OUTSIDE</code> <code>str</code> <p>Triangle outside configuration.</p>"},{"location":"api_reference/cooler/","title":"Cooler","text":""},{"location":"api_reference/cooler/#cooler","title":"Cooler","text":"<p>               Bases: <code>StrEnum</code></p> <p>Cooler setup of a transformer.</p> <p>There are two types of cooling methods for this model.  - ONAN: Oil Natural Air Natural, meaning that the oil is cooled by natural     convection and the air is cooled by natural convection.  - ONAF: which is Oil Natural Air Forced, meaning that the oil is cooled by natural     convection and the air is cooled by forced convection.</p> <p>Attributes:</p> Name Type Description <code>ONAN</code> <code>str</code> <p>Oil Natural Air Natural.</p> <code>ONAF</code> <code>str</code> <p>Oil Natural Air Forced.</p>"},{"location":"api_reference/hot-spot_calibration/","title":"Hot-spot factor calibration","text":""},{"location":"api_reference/hot-spot_calibration/#hot-spot-factor-calibration","title":"Hot-spot factor calibration","text":""},{"location":"api_reference/hot-spot_calibration/#transformer_thermal_model.hot_spot_calibration.calibrate_hotspot_factor.calibrate_hotspot_factor","title":"calibrate_hotspot_factor","text":"<pre><code>calibrate_hotspot_factor(\n    uncalibrated_transformer: PowerTransformer,\n    hot_spot_limit: float,\n    ambient_temp: float,\n    hot_spot_factor_min: float,\n    hot_spot_factor_max: float,\n) -&gt; PowerTransformer\n</code></pre> <p>Calibrate a hot-spot factor for given power transformer.</p> <p>Based on a continuous nominal load with a duration of one week, a specified constant ambient temperature, and a hot-spot temperature limit, the hot-spot factor is calibrated to get as close as possible to 100% nominal load while staying within the 'hot_spot_factor_min' and 'hot_spot_factor_max' bounds.</p> <p>Parameters:</p> Name Type Description Default <code>uncalibrated_transformer</code> <code>PowerTransformer</code> <p>A power transformer without a specified hot-spot factor.</p> required <code>hot_spot_limit</code> <code>float</code> <p>temperature limit for the transformer hot-spot.</p> required <code>ambient_temp</code> <code>float</code> <p>constant ambient temperature in degrees Celsius used for the temperature calculations.</p> required <code>hot_spot_factor_min</code> <code>float</code> <p>minimum allowed value for the hot-spot factor.</p> required <code>hot_spot_factor_max</code> <code>float</code> <p>maximum allowed value for the hot-spot factor.</p> required <p>Returns:</p> Name Type Description <code>PowerTransformer</code> <code>PowerTransformer</code> <p>A calibrated power transformer, where the hot-spot factor is now specified.</p> Source code in <code>transformer_thermal_model/hot_spot_calibration/calibrate_hotspot_factor.py</code> <pre><code>def calibrate_hotspot_factor(\n    uncalibrated_transformer: PowerTransformer,\n    hot_spot_limit: float,\n    ambient_temp: float,\n    hot_spot_factor_min: float,\n    hot_spot_factor_max: float,\n) -&gt; PowerTransformer:\n    \"\"\"Calibrate a hot-spot factor for given power transformer.\n\n    Based on a continuous nominal load with a duration of one week, a specified constant ambient temperature,\n    and a hot-spot temperature limit, the hot-spot factor is calibrated to get as close as\n    possible to 100% nominal load while staying within the 'hot_spot_factor_min' and 'hot_spot_factor_max' bounds.\n\n    Args:\n        uncalibrated_transformer (PowerTransformer): A power transformer without a specified hot-spot factor.\n        hot_spot_limit (float): temperature limit for the transformer hot-spot.\n        ambient_temp (float): constant ambient temperature in degrees Celsius used for the temperature calculations.\n        hot_spot_factor_min (float): minimum allowed value for the hot-spot factor.\n        hot_spot_factor_max (float): maximum allowed value for the hot-spot factor.\n\n    Returns:\n        PowerTransformer: A calibrated power transformer, where the hot-spot factor is now specified.\n\n    \"\"\"\n    if hot_spot_factor_min &gt; hot_spot_factor_max:\n        raise ValueError(\"The upper bound cannot be smaller than the lower bound of the hot-spot factor limits.\")\n    logger.info(\n        \"Calibrating the hot-spot factor of the transformer. The current hot-spot factor equals\"\n        + f\"{uncalibrated_transformer.specs.hot_spot_fac}.\"\n    )\n\n    one_week_steps = 4 * 24 * 7\n    datetime_index = pd.date_range(\"2020-01-01\", periods=one_week_steps, freq=\"15min\")\n    calibrated_transformer = copy.deepcopy(uncalibrated_transformer)\n    # Because the transformer should be calibrated to have a max hot-spot temperature at a constant\n    # ambient temperature (generally 20 degrees celsius), the transformer.temp_verh should not be used\n    # during calibration.\n    calibrated_transformer.specs.amb_temp_surcharge = 0.0\n\n    continuous_load = pd.Series([calibrated_transformer.specs.nom_load_sec_side] * one_week_steps, index=datetime_index)\n    ambient_temp_profile = pd.Series([ambient_temp] * one_week_steps, index=datetime_index)\n    model_input = InputProfile.create(\n        datetime_index=datetime_index, load_profile=continuous_load, ambient_temperature_profile=ambient_temp_profile\n    )\n    # Initiate the difference, one of the termination criteria, to a positive number.\n    difference = 100\n    # Initiate the new_hot_spot_factor with the upper limit. This is the starting point for the search algorithm which\n    # iterativily lowers the new_hot_spot_factor until a valid value is found.\n    new_hot_spot_factor = hot_spot_factor_max\n    calibrated_transformer._set_HS_fac(new_hot_spot_factor)\n    while difference &gt; 0 and (new_hot_spot_factor &gt;= hot_spot_factor_min - 0.01):\n        old_hot_spot_factor = new_hot_spot_factor\n        model = Model(\n            temperature_profile=model_input,\n            transformer=calibrated_transformer,\n        )\n        results = model.run().convert_to_dataframe()\n        hot_spot_max = results[\"hot_spot_temperature\"].max()\n        # Calculate the difference which is used as a termination criterium in the while loop:\n        # the maximum temperature of the hot-spot should be below the hot-spot temperature limit.\n        difference = hot_spot_max - hot_spot_limit\n        # Lower the hot-spot factor with a small number for the next iteration.\n        new_hot_spot_factor = old_hot_spot_factor - 0.01\n        calibrated_transformer._set_HS_fac(new_hot_spot_factor)\n\n    calibrated_hot_spot_factor = np.clip(old_hot_spot_factor, a_min=hot_spot_factor_min, a_max=hot_spot_factor_max)\n    calibrated_transformer._set_HS_fac(calibrated_hot_spot_factor)\n    # During calibration the amb_temp_surcharge was set to zero. To return a transformer with correct specs,\n    # the amb_temp_surcharge is set to the correct value again.\n    calibrated_transformer.specs.amb_temp_surcharge = uncalibrated_transformer.specs.amb_temp_surcharge\n    logger.info(\n        \"The hot-spot factor of the transformer is calibrated. The new hot-spot factor equals\"\n        + f\"{calibrated_transformer.specs.hot_spot_fac}.\"\n    )\n    return calibrated_transformer\n</code></pre>"},{"location":"api_reference/model/","title":"Model","text":""},{"location":"api_reference/model/#model","title":"Model","text":"<p>A thermal model to calculate transformer temperatures under specified load and ambient temperature profiles.</p> Initialising a transformer model with a temperature simulation profile <pre><code>&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; from transformer_thermal_model.cooler import CoolerType\n&gt;&gt;&gt; from transformer_thermal_model.schemas import InputProfile, UserTransformerSpecifications\n&gt;&gt;&gt; from transformer_thermal_model.transformer import PowerTransformer\n&gt;&gt;&gt; from transformer_thermal_model.model import Model\n\n&gt;&gt;&gt; # First, we necreate the input profile\n&gt;&gt;&gt; datetime_index = [\n...     datetime(2023, 1, 1, 0, 0),\n...     datetime(2023, 1, 1, 1, 0),\n...     datetime(2023, 1, 1, 2, 0),\n... ]\n&gt;&gt;&gt; load_profile = [0.8, 0.9, 1.0]\n&gt;&gt;&gt; ambient_temperature_profile = [25.0, 24.5, 24.0]\n&gt;&gt;&gt; input_profile = InputProfile.create(\n...     datetime_index=datetime_index,\n...     load_profile=load_profile,\n...     ambient_temperature_profile=ambient_temperature_profile,\n... )\n&gt;&gt;&gt; # Then, we create the transformer with some basic specifications\n&gt;&gt;&gt; tr_specs = UserTransformerSpecifications(\n...     load_loss=1000,  # Transformer load loss [W]\n...     nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]\n...     no_load_loss=200,  # Transformer no-load loss [W]\n...     amb_temp_surcharge=20,  # Ambient temperature surcharge [K]\n... )\n&gt;&gt;&gt; tr = PowerTransformer(\n...     user_specs=tr_specs,\n...     cooling_type=CoolerType.ONAN\n... )\n&gt;&gt;&gt; # Finally, we can use the input profile in the transformer model\n&gt;&gt;&gt; model = Model(temperature_profile=input_profile, transformer=tr)\n</code></pre> <p>Attributes:</p> Name Type Description <code>transformer</code> <code>Transformer</code> <p>The transformer that the model will use to calculate the temperatures.</p> <code>data</code> <code>DataFrame</code> <p>The data that the model will use to calculate the top-oil and hot-spottemperatures.</p> <code>init_top_oil_temp</code> <code>float | None</code> <p>The initial top-oil temperature. Defaults to None. If this is provided, will start the calculation with this temperature. If not provided, will start the calculation with the first value of the ambient temperature profile.</p> <code>init_hot_spot_temp</code> <code>float | None</code> <p>The initial hot-spot temperature. Defaults to None. If this is provided, will start the calculation with this temperature. If not provided, will start the calculation with the first value of the ambient temperature profile.</p> <code>hot_spot_temp_profile</code> <code>Series</code> <p>The modeled hot-spot temperature profile.</p> <code>top_oil_temp_profile</code> <code>Series</code> <p>The modeled top-oil temperature profile.</p> <p>Parameters:</p> Name Type Description Default <code>temperature_profile</code> <code>InputProfile</code> <p>The temperature profile for the model.</p> required <code>transformer</code> <code>Transformer</code> <p>The transformer object.</p> required <code>init_top_oil_temp</code> <code>float | None</code> <p>The initial top-oil temperature. Defaults to None. If this is provided, will start the calculation with this temperature. If not provided, will start the calculation with the first value of the ambient temperature profile.</p> <code>None</code> <code>init_hot_spot_temp</code> <code>float | None</code> <p>The initial hot-spot temperature. Defaults to None. If this is provided, will start the calculation with this temperature. If not provided, will start the calculation with the first value of the ambient temperature profile.</p> <code>None</code> Source code in <code>transformer_thermal_model/model/thermal_model.py</code> <pre><code>def __init__(\n    self,\n    temperature_profile: InputProfile,\n    transformer: Transformer,\n    init_top_oil_temp: float | None = None,\n    init_hot_spot_temp: float | None = None,\n) -&gt; None:\n    \"\"\"Initialize the thermal model.\n\n    Args:\n        temperature_profile (InputProfile): The temperature profile for the model.\n        transformer (Transformer): The transformer object.\n        init_top_oil_temp (float | None): The initial top-oil temperature. Defaults to None. If this is provided,\n            will start the calculation with this temperature. If not provided, will start the calculation\n            with the first value of the ambient temperature profile.\n        init_hot_spot_temp (float | None): The initial hot-spot temperature. Defaults to None. If this is provided,\n            will start the calculation with this temperature. If not provided, will start the calculation\n            with the first value of the ambient temperature profile.\n\n    \"\"\"\n    logger.info(\"Initializing the thermal model.\")\n    logger.info(f\"First timestamp: {temperature_profile.datetime_index[0]}\")\n    logger.info(f\"Last timestamp: {temperature_profile.datetime_index[-1]}\")\n    logger.info(f\"Amount of data points: {len(temperature_profile)}\")\n    logger.info(f\"Max load: {np.max(temperature_profile.load_profile)}\")\n    if transformer.specs.hot_spot_fac is None:\n        raise AttributeError(\n            \"The given Transformer has no hot-spot factor specified. Please specify the hot-spot \"\n            \"factor or calibrate it using the calibrate_hotspot_factor function.\"\n        )\n    self.transformer = transformer\n    self.data = temperature_profile\n    self.init_top_oil_temp = init_top_oil_temp\n    self.init_hot_spot_temp = init_hot_spot_temp\n</code></pre>"},{"location":"api_reference/model/#transformer_thermal_model.model.thermal_model.Model.run","title":"run","text":"<pre><code>run() -&gt; OutputProfile\n</code></pre> <p>Calculate the top-oil and hot-spot temperatures for the provided Transformer object.</p> <p>This method prepares the calculation inputs, calculates intermediate factors, and computes the top-oil and hot-spot temperature profiles for the transformer based on the provided load and internal parameters.</p> <p>Returns:</p> Name Type Description <code>OutputProfile</code> <code>OutputProfile</code> <p>Object containing the top-oil and hot-spot temperature profiles.</p> Source code in <code>transformer_thermal_model/model/thermal_model.py</code> <pre><code>def run(self) -&gt; OutputProfile:\n    \"\"\"Calculate the top-oil and hot-spot temperatures for the provided Transformer object.\n\n    This method prepares the calculation inputs, calculates intermediate factors, and computes\n    the top-oil and hot-spot temperature profiles for the transformer based on the provided\n    load and internal parameters.\n\n    Returns:\n        OutputProfile: Object containing the top-oil and hot-spot temperature profiles.\n\n    \"\"\"\n    logger.info(\"Running the thermal model.\")\n    dt = self._get_time_step()\n    load = self.data.load_profile\n    t_internal = self._get_internal_temp()\n\n    f1 = self._calculate_f1(dt)\n    f2 = self._calculate_f2(dt)\n    top_k = self.transformer._end_temperature_top_oil(load)\n    static_hot_spot_incr = self._calculate_static_hot_spot_increase(load)\n\n    top_oil_temp_profile, hot_spot_temp_profile = self._calculate_temperature_profiles(\n        load, t_internal, f1, f2, top_k, static_hot_spot_incr\n    )\n    logger.info(\"The calculation with the Thermal model is completed.\")\n    logger.info(f\"Max top-oil temperature: {max(top_oil_temp_profile)}\")\n    logger.info(f\"Max hot-spot temperature: {max(hot_spot_temp_profile)}\")\n\n    return OutputProfile(\n        top_oil_temp_profile=pd.Series(top_oil_temp_profile, index=self.data.datetime_index),\n        hot_spot_temp_profile=pd.Series(hot_spot_temp_profile, index=self.data.datetime_index),\n    )\n</code></pre>"},{"location":"api_reference/model_input_output/","title":"Model input and output","text":""},{"location":"api_reference/model_input_output/#model-input-and-output-schemas","title":"Model input and output schemas","text":"<p>Modules:</p> Name Description <code>input_profile</code> <code>output_profile</code> <p>Classes:</p> Name Description <code>InputProfile</code> <p>Class containing the temperature and load profiles for the thermal model <code>Model()</code>.</p> <code>OutputProfile</code> <p>Class containing the output data for the hot-spot and top-oil temperature calculations.</p>"},{"location":"api_reference/model_input_output/#transformer_thermal_model.schemas.thermal_model.InputProfile","title":"InputProfile","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class containing the temperature and load profiles for the thermal model <code>Model()</code>.</p> <p>This class is also capable of converting the results to a single dataframe with the timestamp as the index for convenience.</p> <p>Attributes:</p> Name Type Description <code>datetime_index</code> <code>NDArray[datetime64]</code> <p>The datetime index for the profiles.</p> <code>load_profile</code> <code>NDArray[float64]</code> <p>The load profile for the transformer.</p> <code>ambient_temperature_profile</code> <code>NDArray[float64]</code> <p>The ambient temperature profile for the transformer.</p> <p>Methods:</p> Name Description <code>create</code> <p>Create an InputProfile from datetime index, load profile, and ambient temperature profile.</p> <code>from_dataframe</code> <p>Create an InputProfile from a dataframe.</p>"},{"location":"api_reference/model_input_output/#transformer_thermal_model.schemas.thermal_model.InputProfile.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(\n    datetime_index: Collection[datetime],\n    load_profile: Collection[float],\n    ambient_temperature_profile: Collection[float],\n) -&gt; Self\n</code></pre> <p>Create an InputProfile from datetime index, load profile, and ambient temperature profile.</p> <p>Parameters:</p> Name Type Description Default <code>datetime_index</code> <code>Collection[datetime]</code> <p>The datetime index for the profiles.</p> required <code>load_profile</code> <code>Collection[float]</code> <p>The load profile for the transformer.</p> required <code>ambient_temperature_profile</code> <code>Collection[float]</code> <p>The ambient temperature profile for the transformer.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>An InputProfile object.</p> Creating an InputProfile from collections. <pre><code>&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; from transformer_thermal_model.schemas import InputProfile\n\n&gt;&gt;&gt; datetime_index = [\n...     datetime(2023, 1, 1, 0, 0),\n...     datetime(2023, 1, 1, 1, 0),\n...     datetime(2023, 1, 1, 2, 0),\n... ]\n&gt;&gt;&gt; load_profile = [0.8, 0.9, 1.0]\n&gt;&gt;&gt; ambient_temperature_profile = [25.0, 24.5, 24.0]\n&gt;&gt;&gt; input_profile = InputProfile.create(\n...     datetime_index=datetime_index,\n...     load_profile=load_profile,\n...     ambient_temperature_profile=ambient_temperature_profile,\n... )\n&gt;&gt;&gt; input_profile\nInputProfile(datetime_index=array(['2023-01-01T00:00:00.000000',\n'2023-01-01T01:00:00.000000', '2023-01-01T02:00:00.000000'],\ndtype='datetime64[us]'), load_profile=array([0.8, 0.9, 1. ]),\nambient_temperature_profile=array([25. , 24.5, 24. ]))\n</code></pre> Directly creating an InputProfile object using numpy arrays. <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; from transformer_thermal_model.schemas import InputProfile\n\n&gt;&gt;&gt; input_profile = InputProfile(\n...     datetime_index=np.array(\n...         [\n...             datetime(2023, 1, 1, 0, 0),\n...             datetime(2023, 1, 1, 1, 0),\n...             datetime(2023, 1, 1, 2, 0)\n...         ],\n...         dtype=np.datetime64,\n...     ),\n...     load_profile=np.array([0.8, 0.9, 1.0], dtype=float),\n...     ambient_temperature_profile=np.array([25.0, 24.5, 24.0], dtype=float),\n... )\n&gt;&gt;&gt; input_profile\nInputProfile(datetime_index=array(['2023-01-01T00:00:00.000000',\n'2023-01-01T01:00:00.000000', '2023-01-01T02:00:00.000000'],\ndtype='datetime64[us]'), load_profile=array([0.8, 0.9, 1. ]),\nambient_temperature_profile=array([25. , 24.5, 24. ]))\n</code></pre> Source code in <code>transformer_thermal_model/schemas/thermal_model/input_profile.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    datetime_index: Collection[datetime],\n    load_profile: Collection[float],\n    ambient_temperature_profile: Collection[float],\n) -&gt; Self:\n    \"\"\"Create an InputProfile from datetime index, load profile, and ambient temperature profile.\n\n    Args:\n        datetime_index: The datetime index for the profiles.\n        load_profile: The load profile for the transformer.\n        ambient_temperature_profile: The ambient temperature profile for the transformer.\n\n    Returns:\n        An InputProfile object.\n\n    Example: Creating an InputProfile from collections.\n        ```python\n        &gt;&gt;&gt; from datetime import datetime\n        &gt;&gt;&gt; from transformer_thermal_model.schemas import InputProfile\n\n        &gt;&gt;&gt; datetime_index = [\n        ...     datetime(2023, 1, 1, 0, 0),\n        ...     datetime(2023, 1, 1, 1, 0),\n        ...     datetime(2023, 1, 1, 2, 0),\n        ... ]\n        &gt;&gt;&gt; load_profile = [0.8, 0.9, 1.0]\n        &gt;&gt;&gt; ambient_temperature_profile = [25.0, 24.5, 24.0]\n        &gt;&gt;&gt; input_profile = InputProfile.create(\n        ...     datetime_index=datetime_index,\n        ...     load_profile=load_profile,\n        ...     ambient_temperature_profile=ambient_temperature_profile,\n        ... )\n        &gt;&gt;&gt; input_profile\n        InputProfile(datetime_index=array(['2023-01-01T00:00:00.000000',\n        '2023-01-01T01:00:00.000000', '2023-01-01T02:00:00.000000'],\n        dtype='datetime64[us]'), load_profile=array([0.8, 0.9, 1. ]),\n        ambient_temperature_profile=array([25. , 24.5, 24. ]))\n\n        ```\n\n    Example: Directly creating an InputProfile object using numpy arrays.\n        ```python\n        &gt;&gt;&gt; import numpy as np\n        &gt;&gt;&gt; from datetime import datetime\n        &gt;&gt;&gt; from transformer_thermal_model.schemas import InputProfile\n\n        &gt;&gt;&gt; input_profile = InputProfile(\n        ...     datetime_index=np.array(\n        ...         [\n        ...             datetime(2023, 1, 1, 0, 0),\n        ...             datetime(2023, 1, 1, 1, 0),\n        ...             datetime(2023, 1, 1, 2, 0)\n        ...         ],\n        ...         dtype=np.datetime64,\n        ...     ),\n        ...     load_profile=np.array([0.8, 0.9, 1.0], dtype=float),\n        ...     ambient_temperature_profile=np.array([25.0, 24.5, 24.0], dtype=float),\n        ... )\n        &gt;&gt;&gt; input_profile\n        InputProfile(datetime_index=array(['2023-01-01T00:00:00.000000',\n        '2023-01-01T01:00:00.000000', '2023-01-01T02:00:00.000000'],\n        dtype='datetime64[us]'), load_profile=array([0.8, 0.9, 1. ]),\n        ambient_temperature_profile=array([25. , 24.5, 24. ]))\n\n        ```\n    \"\"\"\n    return cls(\n        datetime_index=np.array(datetime_index, dtype=np.datetime64),\n        load_profile=np.array(load_profile, dtype=float),\n        ambient_temperature_profile=np.array(ambient_temperature_profile, dtype=float),\n    )\n</code></pre>"},{"location":"api_reference/model_input_output/#transformer_thermal_model.schemas.thermal_model.InputProfile.from_dataframe","title":"from_dataframe  <code>classmethod</code>","text":"<pre><code>from_dataframe(df: DataFrame) -&gt; Self\n</code></pre> <p>Create an InputProfile from a dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The dataframe containing the profiles. The dataframe should have a datetime index and three columns: - 'datetime_index': The datetime index for the profiles. - 'load_profile': The load profile for the transformer. - 'ambient_temperature_profile': The ambient temperature profile for the transformer.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>An InputProfile object.</p> Source code in <code>transformer_thermal_model/schemas/thermal_model/input_profile.py</code> <pre><code>@classmethod\ndef from_dataframe(cls, df: pd.DataFrame) -&gt; Self:\n    \"\"\"Create an InputProfile from a dataframe.\n\n    Args:\n        df: The dataframe containing the profiles. The dataframe should have a datetime index and three columns:\n            - 'datetime_index': The datetime index for the profiles.\n            - 'load_profile': The load profile for the transformer.\n            - 'ambient_temperature_profile': The ambient temperature profile for the transformer.\n\n    Returns:\n        An InputProfile object.\n    \"\"\"\n    required_columns = {\"datetime_index\", \"load_profile\", \"ambient_temperature_profile\"}\n    missing_columns = required_columns - set(df.columns)\n    if missing_columns:\n        raise ValueError(f\"The dataframe is missing the following required columns: {', '.join(missing_columns)}\")\n\n    return cls(\n        datetime_index=df[\"datetime_index\"].to_numpy(),\n        load_profile=df[\"load_profile\"].to_numpy(),\n        ambient_temperature_profile=df[\"ambient_temperature_profile\"].to_numpy(),\n    )\n</code></pre>"},{"location":"api_reference/model_input_output/#transformer_thermal_model.schemas.thermal_model.OutputProfile","title":"OutputProfile","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class containing the output data for the hot-spot and top-oil temperature calculations.</p> <p>The class consists of the top-oil and hot-spot temperature profiles. These have the datetime index as the timestamp that link both of these series together.</p> <p>Additionally, this class has a helper function to convert the output to a single dataframe for convenience.</p> <p>Methods:</p> Name Description <code>convert_to_dataframe</code> <p>Process the two pandas Series and convert them to a single dataframe, linked by the timestamp.</p>"},{"location":"api_reference/model_input_output/#transformer_thermal_model.schemas.thermal_model.OutputProfile.convert_to_dataframe","title":"convert_to_dataframe","text":"<pre><code>convert_to_dataframe() -&gt; DataFrame\n</code></pre> <p>Process the two pandas Series and convert them to a single dataframe, linked by the timestamp.</p> Source code in <code>transformer_thermal_model/schemas/thermal_model/output_profile.py</code> <pre><code>def convert_to_dataframe(self) -&gt; pd.DataFrame:\n    \"\"\"Process the two pandas Series and convert them to a single dataframe, linked by the timestamp.\"\"\"\n    df = pd.DataFrame(\n        {\n            \"timestamp\": self.top_oil_temp_profile.index,\n            \"top_oil_temperature\": self.top_oil_temp_profile,\n            \"hot_spot_temperature\": self.hot_spot_temp_profile,\n        }\n    )\n    return df\n</code></pre>"},{"location":"api_reference/specifications/","title":"Specifications","text":""},{"location":"api_reference/specifications/#specifications","title":"Specifications","text":""},{"location":"api_reference/specifications/#transformer-specifications","title":"Transformer specifications","text":"<p>A transformer object in our package needs to be initiated using a set of specifications. A user will typically only interact with <code>UserTransformerSpecifications</code>. The <code>DefaultTransformerSpecifications</code> are used to set the <code>Transformer.defaults</code> values. The <code>TransformerSpecifications</code> is created to make sure the <code>UserTransformerSpecifications</code> and the <code>DefaultTransformerSpecifications</code> are neatly combined.</p> <p>Classes:</p> Name Description <code>UserTransformerSpecifications</code> <p>The transformer specifications that the user must and can provide.</p> <code>DefaultTransformerSpecifications</code> <p>The default transformer specifications that will be defined when the user does not provide them.</p> <code>TransformerSpecifications</code> <p>Class containing transformer specifications.</p>"},{"location":"api_reference/specifications/#transformer_thermal_model.schemas.specifications.transformer.UserTransformerSpecifications","title":"UserTransformerSpecifications","text":"<p>               Bases: <code>BaseModel</code></p> <p>The transformer specifications that the user must and can provide.</p> <p>If any of the optional values are provided, they will overwrite the <code>defaults</code> that are set in the respective <code>Transformer</code> class.</p>"},{"location":"api_reference/specifications/#transformer_thermal_model.schemas.specifications.transformer.DefaultTransformerSpecifications","title":"DefaultTransformerSpecifications","text":"<p>               Bases: <code>BaseModel</code></p> <p>The default transformer specifications that will be defined when the user does not provide them.</p> <p>Each <code>Transformer</code> object has a class variable <code>defaults</code> that contains the default transformer specifications.</p>"},{"location":"api_reference/specifications/#transformer_thermal_model.schemas.specifications.transformer.TransformerSpecifications","title":"TransformerSpecifications","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class containing transformer specifications.</p> <p>This class is a combination of the mandatory user-provided specifications and the default transformer specifications. Should the user provide any of the optional specifications, they will override the default specifications, via the <code>create</code> class method.</p> <p>Methods:</p> Name Description <code>create</code> <p>Create the transformer specifications from the defaults and the user specifications.</p>"},{"location":"api_reference/specifications/#transformer_thermal_model.schemas.specifications.transformer.TransformerSpecifications.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(\n    defaults: DefaultTransformerSpecifications,\n    user: UserTransformerSpecifications,\n) -&gt; TransformerSpecifications\n</code></pre> <p>Create the transformer specifications from the defaults and the user specifications.</p> Source code in <code>transformer_thermal_model/schemas/specifications/transformer.py</code> <pre><code>@classmethod\ndef create(\n    cls, defaults: DefaultTransformerSpecifications, user: UserTransformerSpecifications\n) -&gt; \"TransformerSpecifications\":\n    \"\"\"Create the transformer specifications from the defaults and the user specifications.\"\"\"\n    data = defaults.model_dump()\n    data.update(user.model_dump(exclude_none=True))\n    logger.info(\"Complete transformer specifications: %s\", data)\n    return cls(**data)\n</code></pre>"},{"location":"api_reference/specifications/#transformer-component-specifications","title":"Transformer component specifications","text":"<p>Classes:</p> Name Description <code>TransformerComponentSpecifications</code> <p>Component specifications for internal components of the power transformer.</p>"},{"location":"api_reference/specifications/#transformer_thermal_model.schemas.specifications.transformer_component.TransformerComponentSpecifications","title":"TransformerComponentSpecifications","text":"<p>               Bases: <code>BaseModel</code></p> <p>Component specifications for internal components of the power transformer.</p> <p>These specifications are used to calculate the limiting component in a <code>PowerTransformer</code>, which is optional entirely. It is used to define the components in the <code>PowerTransformer</code>, to then determine the limiting component.</p> <p>Attributes:</p> Name Type Description <code>nom_load_prim_side</code> <code>float</code> <p>Nominal current on the primary side of the transformer [A].</p> <code>tap_chang_capacity</code> <code>float | None</code> <p>Tap changer nominal current [A].</p> <code>tap_chang_conf</code> <code>VectorConfig | None</code> <p>Tap Changer configuration.</p> <code>tap_chang_side</code> <code>TransformerSide | None</code> <p>Tap changer side.</p> <code>prim_bush_capacity</code> <code>float | None</code> <p>Primary bushing nominal current [A].</p> <code>prim_bush_conf</code> <code>BushingConfig | None</code> <p>Primary bushing configuration.</p> <code>sec_bush_capacity</code> <code>float | None</code> <p>Secondary bushing nominal current [A].</p> <code>sec_bush_conf</code> <code>BushingConfig | None</code> <p>Secondary bushing configuration.</p> <code>cur_trans_capacity</code> <code>float | None</code> <p>Current transformer nominal current [A].</p> <code>cur_trans_conf</code> <code>VectorConfig | None</code> <p>Current transformer configuration.</p> <code>cur_trans_side</code> <code>TransformerSide | None</code> <p>Current transformer side.</p> Initialising a power transformer with component specifications. <pre><code>&gt;&gt;&gt; from transformer_thermal_model.cooler import CoolerType\n&gt;&gt;&gt; from transformer_thermal_model.components import VectorConfig, TransformerSide\n&gt;&gt;&gt; from transformer_thermal_model.schemas import (\n...     TransformerComponentSpecifications,\n...     UserTransformerSpecifications\n... )\n&gt;&gt;&gt; from transformer_thermal_model.transformer import PowerTransformer\n\n&gt;&gt;&gt; tr_specs = UserTransformerSpecifications(\n...         load_loss=1000,  # Transformer load loss [W]\n...         nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]\n...         no_load_loss=200,  # Transformer no-load loss [W]\n...         amb_temp_surcharge=20,  # Ambient temperature surcharge [K]\n... )\n&gt;&gt;&gt; comp_specs = TransformerComponentSpecifications(\n...     tap_chang_capacity=600,\n...     nom_load_prim_side=550,\n...     tap_chang_conf=VectorConfig.STAR,\n...     tap_chang_side=TransformerSide.PRIMARY\n... )\n&gt;&gt;&gt; tr = PowerTransformer(\n...     user_specs=tr_specs,\n...     cooling_type=CoolerType.ONAF,\n...     internal_component_specs=comp_specs\n... )\n&gt;&gt;&gt; tr.component_capacities\n{'tap_changer': 1.0909090909090908, 'primary_bushings': None,\n'secondary_bushings': None, 'current_transformer': None}\n</code></pre>"},{"location":"api_reference/toolbox/","title":"Toolbox","text":""},{"location":"api_reference/toolbox/#toolbox","title":"Toolbox","text":"<p>This module contains a function that can be useful when working with the Transformer Thermal Model.a</p> <p>Modules:</p> Name Description <code>temp_sim_profile_tools</code> <p>Functions:</p> Name Description <code>create_temp_sim_profile_from_df</code> <p>Create an InputProfile from a dataframe.</p>"},{"location":"api_reference/toolbox/#transformer_thermal_model.toolbox.create_temp_sim_profile_from_df","title":"create_temp_sim_profile_from_df","text":"<pre><code>create_temp_sim_profile_from_df(\n    profile_as_dataframe: DataFrame,\n) -&gt; InputProfile\n</code></pre> <p>Create an InputProfile from a dataframe.</p> <p>This function is added as support for the transformer thermal model. It is handy if you have a dataframe with the temperature simulation profile and you want to use it in the transformer thermal model. Be mindful of the names of the columns, since these are directly called in the function.</p> <p>If you do not want to change column names, consider using the InputProfile.create method directly.</p> The dataframe should contain the following columns <ul> <li>timestamp: The timestamp of the profile.</li> <li>load: The load profile.</li> <li>ambient_temperature: The ambient temperature profile.</li> </ul> Creating an input profile from a dataframe. <pre><code>&gt;&gt;&gt; import pandas as pd\n\n&gt;&gt;&gt; profile = pd.DataFrame(\n...     {\n...         \"timestamp\": pd.to_datetime([\"2021-01-01 00:00:00\", \"2021-01-01 01:00:00\", \"2021-01-01 02:00:00\"]),\n...         \"load\": [0, 0, 0],\n...         \"ambient_temperature\": [5, 5, 5],\n...     }\n... )\n&gt;&gt;&gt; input_profile = create_temp_sim_profile_from_df(profile)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>profile_as_dataframe</code> <code>DataFrame</code> <p>The dataframe containing the profile data.</p> required <p>Returns:</p> Name Type Description <code>InputProfile</code> <code>InputProfile</code> <p>The temperature simulation profile.</p> Source code in <code>transformer_thermal_model/toolbox/temp_sim_profile_tools.py</code> <pre><code>def create_temp_sim_profile_from_df(profile_as_dataframe: pd.DataFrame) -&gt; InputProfile:\n    \"\"\"Create an InputProfile from a dataframe.\n\n    This function is added as support for the transformer thermal model. It is\n    handy if you have a dataframe with the temperature simulation profile and\n    you want to use it in the transformer thermal model. Be mindful of the\n    names of the columns, since these are directly called in the function.\n\n    If you do not want to change column names, consider using the\n    [InputProfile.create][transformer_thermal_model.schemas.thermal_model.input_profile.InputProfile.create]\n    method directly.\n\n    The dataframe should contain the following columns:\n        - timestamp: The timestamp of the profile.\n        - load: The load profile.\n        - ambient_temperature: The ambient temperature profile.\n\n    Example: Creating an input profile from a dataframe.\n        ```python\n        &gt;&gt;&gt; import pandas as pd\n\n        &gt;&gt;&gt; profile = pd.DataFrame(\n        ...     {\n        ...         \"timestamp\": pd.to_datetime([\"2021-01-01 00:00:00\", \"2021-01-01 01:00:00\", \"2021-01-01 02:00:00\"]),\n        ...         \"load\": [0, 0, 0],\n        ...         \"ambient_temperature\": [5, 5, 5],\n        ...     }\n        ... )\n        &gt;&gt;&gt; input_profile = create_temp_sim_profile_from_df(profile)\n\n        ```\n\n    Args:\n        profile_as_dataframe (pd.DataFrame): The dataframe containing the profile data.\n\n    Returns:\n        InputProfile: The temperature simulation profile.\n\n    \"\"\"\n    return InputProfile.create(\n        datetime_index=profile_as_dataframe[\"timestamp\"],\n        load_profile=profile_as_dataframe[\"load\"],\n        ambient_temperature_profile=profile_as_dataframe[\"ambient_temperature\"],\n    )\n</code></pre>"},{"location":"api_reference/transformer/","title":"Transformer","text":""},{"location":"api_reference/transformer/#transformer","title":"Transformer","text":"<p>The Transformer is the main object that needs to be defined to work with our thermal model.</p>"},{"location":"api_reference/transformer/#transformer_thermal_model.transformer.Transformer","title":"Transformer","text":"<pre><code>Transformer(\n    user_specs: UserTransformerSpecifications,\n    cooling_type: CoolerType,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract class to define the transformer object.</p> <p>Depending on the type of transformer (either PowerTransformer or DistributionTransformer), the transformer attains certain default attributes. These attributes can be overwritten by using the TR_Specs dictionary.</p> <p>Attributes:</p> Name Type Description <code>cooling_type</code> <code>CoolerType</code> <p>The cooling type. Can be CoolerType.ONAN or CoolerType.ONAF.</p> <p>(TransformerSpecifications): The transformer specifications that you need to     provide to build the transformer. Any optional specifications not provided     will be taken from the default specifications.</p> <p>Parameters:</p> Name Type Description Default <code>user_specs</code> <code>UserTransformerSpecifications</code> <p>The transformer specifications that you need to provide to build the transformer. Any optional specifications not provided will be taken from the default specifications.</p> required <code>cooling_type</code> <code>CoolerType</code> <p>The cooling type. Can be ONAN, ONAF.</p> required Source code in <code>transformer_thermal_model/transformer/base.py</code> <pre><code>def __init__(\n    self,\n    user_specs: UserTransformerSpecifications,\n    cooling_type: CoolerType,\n):\n    \"\"\"Initialize the Transformer object.\n\n    Args:\n        user_specs (UserTransformerSpecifications): The transformer specifications that you need to\n            provide to build the transformer. Any optional specifications not provided will be taken from the\n            default specifications.\n        cooling_type (CoolerType): The cooling type. Can be ONAN, ONAF.\n    \"\"\"\n    self.cooling_type: CoolerType = cooling_type\n    self.specs = TransformerSpecifications.create(self.defaults, user_specs)\n</code></pre>"},{"location":"api_reference/transformer/#transformer_thermal_model.transformer.Transformer.defaults","title":"defaults  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>defaults: DefaultTransformerSpecifications\n</code></pre> <p>The default transformer specifications.</p>"},{"location":"api_reference/transformer/#transformer_thermal_model.transformer.PowerTransformer","title":"PowerTransformer","text":"<pre><code>PowerTransformer(\n    user_specs: UserTransformerSpecifications,\n    cooling_type: CoolerType,\n    internal_component_specs: TransformerComponentSpecifications\n    | None = None,\n)\n</code></pre> <p>               Bases: <code>Transformer</code></p> <p>A power transformer.</p> <p>This class represents a power transformer. This class inherits from the Transformer class.</p> <p>Attributes:</p> Name Type Description <code>internal_component_specs</code> <code>TransformerComponentSpecifications | None</code> <p>The internal component specifications which are used to calculate the relative component capacities. Defaults to None.</p> <p>Parameters:</p> Name Type Description Default <code>user_specs</code> <code>UserTransformerSpecifications</code> <p>The transformer specifications that you need to provide to build the transformer. Any optional specifications not provided will be taken from the default specifications.</p> required <code>cooling_type</code> <code>CoolerType</code> <p>The cooling type. Can be ONAN or ONAF.</p> required <code>internal_component_specs</code> <code>TransformerComponentSpecifications</code> <p>The internal component specifications, which are used to calculate the limiting component. Defaults to None.</p> <code>None</code> Source code in <code>transformer_thermal_model/transformer/power.py</code> <pre><code>def __init__(\n    self,\n    user_specs: UserTransformerSpecifications,\n    cooling_type: CoolerType,\n    internal_component_specs: TransformerComponentSpecifications | None = None,\n):\n    \"\"\"Initialize the transformer object.\n\n    Args:\n        user_specs (UserTransformerSpecifications): The transformer specifications that you need to\n            provide to build the transformer. Any optional specifications not provided will be taken from the\n            default specifications.\n        cooling_type (CoolerType): The cooling type. Can be ONAN or ONAF.\n        internal_component_specs (TransformerComponentSpecifications, optional): The internal component\n            specifications, which are used to calculate the limiting component. Defaults to None.\n\n    \"\"\"\n    logger.info(\"Creating a power transformer object.\")\n    logger.info(\"User transformer specifications: %s\", user_specs)\n    logger.info(\"Cooling type: %s\", cooling_type)\n\n    if internal_component_specs is not None:\n        logger.info(\"Internal component specifications: %s\", internal_component_specs)\n        self.internal_component_specs = internal_component_specs\n\n    super().__init__(\n        user_specs=user_specs,\n        cooling_type=cooling_type,\n    )\n</code></pre>"},{"location":"api_reference/transformer/#transformer_thermal_model.transformer.PowerTransformer.defaults","title":"defaults  <code>property</code>","text":"<pre><code>defaults: DefaultTransformerSpecifications\n</code></pre> <p>The ClassVar for default TransformerSpecifications.</p> <p>If PowerTransformer is not initialised, uses the ONAF specifications.</p>"},{"location":"api_reference/transformer/#transformer_thermal_model.transformer.PowerTransformer.tap_changer_capacity_ratio","title":"tap_changer_capacity_ratio  <code>property</code>","text":"<pre><code>tap_changer_capacity_ratio: float | None\n</code></pre> <p>The ratio between the tap changer capacity and the nominal load of the transformer.</p>"},{"location":"api_reference/transformer/#transformer_thermal_model.transformer.PowerTransformer.primary_bushing_capacity_ratio","title":"primary_bushing_capacity_ratio  <code>property</code>","text":"<pre><code>primary_bushing_capacity_ratio: float | None\n</code></pre> <p>The ratio between the primary bushing capacity and the nominal load of the transformer.</p>"},{"location":"api_reference/transformer/#transformer_thermal_model.transformer.PowerTransformer.secondary_bushing_capacity_ratio","title":"secondary_bushing_capacity_ratio  <code>property</code>","text":"<pre><code>secondary_bushing_capacity_ratio: float | None\n</code></pre> <p>The ratio between the secondary bushing capacity and the nominal load of the transformer.</p>"},{"location":"api_reference/transformer/#transformer_thermal_model.transformer.PowerTransformer.int_cur_trans_capacity_ratio","title":"int_cur_trans_capacity_ratio  <code>property</code>","text":"<pre><code>int_cur_trans_capacity_ratio: float | None\n</code></pre> <p>The ratio between the internal current transformer capacity and the nominal load of the transformer.</p>"},{"location":"api_reference/transformer/#transformer_thermal_model.transformer.PowerTransformer.component_capacities","title":"component_capacities  <code>property</code>","text":"<pre><code>component_capacities: dict\n</code></pre> <p>Puts the limits of all transformer components in a single dictionary.</p>"},{"location":"api_reference/transformer/#transformer_thermal_model.transformer.DistributionTransformer","title":"DistributionTransformer","text":"<pre><code>DistributionTransformer(\n    user_specs: UserTransformerSpecifications,\n)\n</code></pre> <p>               Bases: <code>Transformer</code></p> <p>A distribution transformer.</p> <p>The DistributionTransformer class represents a distribution transformer. This class inherits from the Transformer class. This transformer can only be used with ONAN (Oil Natural Air Natural) cooling type.</p> Initialising a distribution transformer. <pre><code>&gt;&gt;&gt; from transformer_thermal_model.schemas import UserTransformerSpecifications\n&gt;&gt;&gt; from transformer_thermal_model.transformer import DistributionTransformer\n\n&gt;&gt;&gt; transformer_specifications = UserTransformerSpecifications(\n...     load_loss=5200,  # Transformer load loss [W]\n...     nom_load_sec_side=900,  # Transformer nominal current secondary side [A]\n...     no_load_loss=800,  # Transformer no-load loss [W]\n...     amb_temp_surcharge=10,  # Ambient temperature surcharge [K]\n... )\n&gt;&gt;&gt; # note that no cooling type can be specified here, as this is a distribution transformer\n&gt;&gt;&gt; my_transformer = DistributionTransformer(user_specs=transformer_specifications)\n&gt;&gt;&gt; # the default specifications that will be used when not provided\n&gt;&gt;&gt; print(my_transformer.defaults)\ntime_const_oil=180.0 time_const_windings=4.0 top_oil_temp_rise=60.0\nwinding_oil_gradient=23.0 hot_spot_fac=1.2 oil_const_k11=1.0\nwinding_const_k21=1 winding_const_k22=2 oil_exp_x=0.8 winding_exp_y=1.6\nend_temp_reduction=0.0\n&gt;&gt;&gt; # the combination of the user specifications and the default specifications\n&gt;&gt;&gt; print(my_transformer.specs)\nload_loss=5200.0 nom_load_sec_side=900.0 no_load_loss=800.0\namb_temp_surcharge=10.0 time_const_oil=180.0 time_const_windings=4.0\ntop_oil_temp_rise=60.0 winding_oil_gradient=23.0 hot_spot_fac=1.2\noil_const_k11=1.0 winding_const_k21=1 winding_const_k22=2 oil_exp_x=0.8\nwinding_exp_y=1.6 end_temp_reduction=0.0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>user_specs</code> <code>UserTransformerSpecifications</code> <p>The transformer specifications that you need to provide to build the transformer. Any optional specifications not provided will be taken from the default specifications.</p> required Source code in <code>transformer_thermal_model/transformer/distribution.py</code> <pre><code>def __init__(\n    self,\n    user_specs: UserTransformerSpecifications,\n):\n    \"\"\"Initialize the transformer object.\n\n    Args:\n        user_specs (UserTransformerSpecifications): The transformer specifications that you need to\n            provide to build the transformer. Any optional specifications not provided will be taken from the\n            default specifications.\n\n    \"\"\"\n    logger.info(\"Creating a distribution transformer object.\")\n    logger.info(\"User transformer specifications: %s\", user_specs)\n\n    super().__init__(\n        user_specs=user_specs,\n        cooling_type=CoolerType.ONAN,\n    )\n</code></pre>"},{"location":"api_reference/transformer/#transformer_thermal_model.transformer.DistributionTransformer.defaults","title":"defaults  <code>property</code>","text":"<pre><code>defaults: DefaultTransformerSpecifications\n</code></pre> <p>Return the default transformer specifications.</p>"},{"location":"examples/example_initial_state/","title":"Modelling with an initial state","text":"<p>In some cases you know the state of the transformer, e.g. because you have hotspot and topoil temperature measurement and want to make a prediction for the remainder period, then you can use this to initiate transformer.</p> <p>If you do not initiate with this information you should be aware that the the model is, by default, initiated with the ambient temperature and therefore requires a warm-up period. For a power transformer both top-oil and hot-spot temperature are initiated with the ambient temperature plus the ambient temperature surcharge. In case of a distribution transformer both are initiated with the ambient temperature. As a consequence, a period should be cut off. Typically a period of 5 times the oil time constant in minutes is used: <code>my_transformer.specs.time_const_oil * 5</code>. In this period the transformer had enough time to warm up or cool down to match the applied load and ambient temperature.</p> <p>In the other examples a period is manually truncated from the resulting temperature profiles. In these examples this is required because this part of the result is not reliable.</p> <p>In this example the model is initiated with an initial state and a constant load and ambient temperature profile are used. The result is then compared with a result without providing an initial state.</p> <p>Before we start modelling the transformer, we will first import all the required functions and classes.</p> In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom transformer_thermal_model.cooler import CoolerType\nfrom transformer_thermal_model.model import Model\nfrom transformer_thermal_model.schemas import InputProfile, UserTransformerSpecifications\nfrom transformer_thermal_model.transformer import PowerTransformer\n</pre> import matplotlib.pyplot as plt import pandas as pd  from transformer_thermal_model.cooler import CoolerType from transformer_thermal_model.model import Model from transformer_thermal_model.schemas import InputProfile, UserTransformerSpecifications from transformer_thermal_model.transformer import PowerTransformer In\u00a0[2]: Copied! <pre>one_week = 4 * 24 * 7\ndatetime_index = pd.date_range(\"2025-07-01\", periods=one_week, freq=\"15min\")\n\n# The ambient temperature during this week is 20 degrees celsius\nambient_temp = 20\nambient_series = pd.Series([ambient_temp] * one_week, index=datetime_index)\n\n# And the transformer is exposed to a nominal load of 100 Ampere:\nload = 100\nload_series = pd.Series([load] * one_week, index=datetime_index)\n\n# Create an input object with the profiles\nprofile_input = InputProfile.create(\n    datetime_index=datetime_index, load_profile=load_series, ambient_temperature_profile=ambient_series\n)\n</pre> one_week = 4 * 24 * 7 datetime_index = pd.date_range(\"2025-07-01\", periods=one_week, freq=\"15min\")  # The ambient temperature during this week is 20 degrees celsius ambient_temp = 20 ambient_series = pd.Series([ambient_temp] * one_week, index=datetime_index)  # And the transformer is exposed to a nominal load of 100 Ampere: load = 100 load_series = pd.Series([load] * one_week, index=datetime_index)  # Create an input object with the profiles profile_input = InputProfile.create(     datetime_index=datetime_index, load_profile=load_series, ambient_temperature_profile=ambient_series ) In\u00a0[3]: Copied! <pre>transformer_specifications = UserTransformerSpecifications(\n    load_loss=1000,  # Transformer load loss [W]\n    nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]\n    no_load_loss=200,  # Transformer no-load loss [W]\n    amb_temp_surcharge=20,  # Ambient temperature surcharge [K]\n)\ncooler_type = CoolerType.ONAN\ntransformer = PowerTransformer(user_specs=transformer_specifications, cooling_type=cooler_type)\n</pre> transformer_specifications = UserTransformerSpecifications(     load_loss=1000,  # Transformer load loss [W]     nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]     no_load_loss=200,  # Transformer no-load loss [W]     amb_temp_surcharge=20,  # Ambient temperature surcharge [K] ) cooler_type = CoolerType.ONAN transformer = PowerTransformer(user_specs=transformer_specifications, cooling_type=cooler_type) In\u00a0[4]: Copied! <pre>model_without_initialization = Model(\n    temperature_profile=profile_input,\n    transformer=transformer,\n)\n\nresults_without_initialization = model_without_initialization.run()\n</pre> model_without_initialization = Model(     temperature_profile=profile_input,     transformer=transformer, )  results_without_initialization = model_without_initialization.run() In\u00a0[5]: Copied! <pre>model_with_initialization = Model(\n    temperature_profile=profile_input,\n    transformer=transformer,\n    init_top_oil_temp=54.5,\n    init_hot_spot_temp=55.5,\n)\n\nresults_with_initialization = model_with_initialization.run()\n</pre> model_with_initialization = Model(     temperature_profile=profile_input,     transformer=transformer,     init_top_oil_temp=54.5,     init_hot_spot_temp=55.5, )  results_with_initialization = model_with_initialization.run() <p>If you look at the results, you can see that the model with initialization already has the correct start temperature and the trunctation of the start period is not required.</p> In\u00a0[6]: Copied! <pre>truncation_time = datetime_index[0] + pd.Timedelta(transformer.specs.time_const_oil * 5, \"m\")\n\nfig = plt.figure()\nax = results_with_initialization.top_oil_temp_profile.plot(\n    label=\"Top-oil temperature, with initialization\", color=\"blue\", style=\"--\"\n)\nresults_with_initialization.hot_spot_temp_profile.plot(\n    label=\"Hot-spot temperature, with initialization\", color=\"blue\", style=\"-\"\n)\n\nresults_without_initialization.top_oil_temp_profile.plot(\n    label=\"Top-oil temperature, *without* initialization\", color=\"red\", style=\"--\"\n)\nresults_without_initialization.hot_spot_temp_profile.plot(\n    label=\"Hot-spot temperature, *without* initialization\", color=\"red\", style=\"-\"\n)\n\nax.vlines(truncation_time, 35, 60, linestyles=\"dashed\", label=\"five times oil time constant\", color=\"green\")\n# ambient_series.plot(label='Ambient temperature')\nax.set_ylabel(\"Temperature [C]\")\nax.set_xlim([datetime_index[0], datetime_index[-1]])\nax.set_ylim([35, 60])\nax.legend(loc=\"lower right\");\n</pre> truncation_time = datetime_index[0] + pd.Timedelta(transformer.specs.time_const_oil * 5, \"m\")  fig = plt.figure() ax = results_with_initialization.top_oil_temp_profile.plot(     label=\"Top-oil temperature, with initialization\", color=\"blue\", style=\"--\" ) results_with_initialization.hot_spot_temp_profile.plot(     label=\"Hot-spot temperature, with initialization\", color=\"blue\", style=\"-\" )  results_without_initialization.top_oil_temp_profile.plot(     label=\"Top-oil temperature, *without* initialization\", color=\"red\", style=\"--\" ) results_without_initialization.hot_spot_temp_profile.plot(     label=\"Hot-spot temperature, *without* initialization\", color=\"red\", style=\"-\" )  ax.vlines(truncation_time, 35, 60, linestyles=\"dashed\", label=\"five times oil time constant\", color=\"green\") # ambient_series.plot(label='Ambient temperature') ax.set_ylabel(\"Temperature [C]\") ax.set_xlim([datetime_index[0], datetime_index[-1]]) ax.set_ylim([35, 60]) ax.legend(loc=\"lower right\"); In\u00a0[7]: Copied! <pre>print(results_without_initialization.top_oil_temp_profile.head(1))\nprint(results_without_initialization.hot_spot_temp_profile.head(1))\n</pre> print(results_without_initialization.top_oil_temp_profile.head(1)) print(results_without_initialization.hot_spot_temp_profile.head(1)) <pre>2025-07-01    40.0\ndtype: float64\n2025-07-01    40.0\ndtype: float64\n</pre> <p>If we zoom in into the first period we can see that, indeed, within the period of five times the oil time-constant the model without initialization did converge.</p> In\u00a0[8]: Copied! <pre>x_lim = datetime_index[0] + pd.Timedelta(transformer.specs.time_const_oil * 10, \"m\")\nfig = plt.figure()\nax = results_with_initialization.top_oil_temp_profile.plot(\n    label=\"Top-oil temperature, with initialization\", color=\"blue\", style=\"--\"\n)\nresults_with_initialization.hot_spot_temp_profile.plot(\n    label=\"Hot-spot temperature, with initialization\", color=\"blue\", style=\"-\"\n)\n\nresults_without_initialization.top_oil_temp_profile.plot(\n    label=\"Top-oil temperature, *without* initialization\", color=\"red\", style=\"--\"\n)\nresults_without_initialization.hot_spot_temp_profile.plot(\n    label=\"Hot-spot temperature, *without* initialization\", color=\"red\", style=\"-\"\n)\n\nax.vlines(truncation_time, 35, 60, linestyles=\"dashed\", label=\"five times oil time constant\", color=\"green\")\n# ambient_series.plot(label='Ambient temperature')\nax.set_ylabel(\"Temperature [C]\")\nax.set_xlim([datetime_index[0], x_lim])\nax.set_ylim([35, 60])\nax.legend(loc=\"lower right\");\n</pre> x_lim = datetime_index[0] + pd.Timedelta(transformer.specs.time_const_oil * 10, \"m\") fig = plt.figure() ax = results_with_initialization.top_oil_temp_profile.plot(     label=\"Top-oil temperature, with initialization\", color=\"blue\", style=\"--\" ) results_with_initialization.hot_spot_temp_profile.plot(     label=\"Hot-spot temperature, with initialization\", color=\"blue\", style=\"-\" )  results_without_initialization.top_oil_temp_profile.plot(     label=\"Top-oil temperature, *without* initialization\", color=\"red\", style=\"--\" ) results_without_initialization.hot_spot_temp_profile.plot(     label=\"Hot-spot temperature, *without* initialization\", color=\"red\", style=\"-\" )  ax.vlines(truncation_time, 35, 60, linestyles=\"dashed\", label=\"five times oil time constant\", color=\"green\") # ambient_series.plot(label='Ambient temperature') ax.set_ylabel(\"Temperature [C]\") ax.set_xlim([datetime_index[0], x_lim]) ax.set_ylim([35, 60]) ax.legend(loc=\"lower right\");"},{"location":"examples/example_initial_state/#introduction","title":"Introduction\u00b6","text":""},{"location":"examples/example_initial_state/#load-and-ambient-temperature-profile","title":"Load and ambient temperature profile\u00b6","text":"<p>First we will create data to simulate the ambient temperature during this summer week together with a constant load. Both profiles will have a duration of a week with a sampling time of 15 minutes.</p>"},{"location":"examples/example_initial_state/#transformer-creation","title":"Transformer creation\u00b6","text":"<p>The next step is to create a power transformer object. We will use the default specifications of the power transformer. Additionally, there are five mandatory specifications to be set.</p> <p>Note that the specification in the example below are randomly chosen.</p>"},{"location":"examples/example_initial_state/#modelling-without-and-with-manual-initialization","title":"Modelling without and with manual initialization\u00b6","text":"<p>Now it is time to create a model based on the transformer and the profiles and run the model to create a temperature profile of the top-oil and the hot-spot.</p> <p>Below we create two models: one with initialization and one without initialization.</p>"},{"location":"examples/hot-spot_calibration/","title":"Hot-spot factor calibration","text":"In\u00a0[\u00a0]: Copied! <pre>import pandas as pd\n\nfrom transformer_thermal_model.cooler import CoolerType\nfrom transformer_thermal_model.model import Model\nfrom transformer_thermal_model.schemas import InputProfile, UserTransformerSpecifications\nfrom transformer_thermal_model.transformer import PowerTransformer\n\n# In this example the model is used to calculate the transformer temperature based on a load and ambient\n# profile with a period of one week. Any duration can be chosen preferably with timestamps with an interval of\n# 15 minute or lower. Larger timesteps will result in incorrect results but it *is* possible to calculate with them.\none_week = 4 * 24 * 7\ndatetime_index = pd.date_range(\"2020-01-01\", periods=one_week, freq=\"15min\")\n\n# For the load (in A) and ambient temperature (in C) arbitrary constants profiles are chosen.\n# It is also possible to use a realistic profile.\nnominal_load = 100\nload_points = pd.Series([nominal_load] * one_week, index=datetime_index)\nambient_temp = 21\ntemperature_points = pd.Series([ambient_temp] * one_week, index=datetime_index)\n\n# Create an input object with the profiles\nprofile_input = InputProfile.create(\n    datetime_index=datetime_index, load_profile=load_points, ambient_temperature_profile=temperature_points\n)\n\n# Initialise a power transformer with cooling type ONAF and, besides the mandatory user specifications, default values.\ntr_specs = UserTransformerSpecifications(\n    load_loss=1000,  # Transformer load loss [W]\n    nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]\n    no_load_loss=200,  # Transformer no-load loss [W]\n    amb_temp_surcharge=20,  # Ambient temperature surcharge [K]\n)\ntransformer = PowerTransformer(user_specs=tr_specs, cooling_type=CoolerType.ONAF)\n</pre> import pandas as pd  from transformer_thermal_model.cooler import CoolerType from transformer_thermal_model.model import Model from transformer_thermal_model.schemas import InputProfile, UserTransformerSpecifications from transformer_thermal_model.transformer import PowerTransformer  # In this example the model is used to calculate the transformer temperature based on a load and ambient # profile with a period of one week. Any duration can be chosen preferably with timestamps with an interval of # 15 minute or lower. Larger timesteps will result in incorrect results but it *is* possible to calculate with them. one_week = 4 * 24 * 7 datetime_index = pd.date_range(\"2020-01-01\", periods=one_week, freq=\"15min\")  # For the load (in A) and ambient temperature (in C) arbitrary constants profiles are chosen. # It is also possible to use a realistic profile. nominal_load = 100 load_points = pd.Series([nominal_load] * one_week, index=datetime_index) ambient_temp = 21 temperature_points = pd.Series([ambient_temp] * one_week, index=datetime_index)  # Create an input object with the profiles profile_input = InputProfile.create(     datetime_index=datetime_index, load_profile=load_points, ambient_temperature_profile=temperature_points )  # Initialise a power transformer with cooling type ONAF and, besides the mandatory user specifications, default values. tr_specs = UserTransformerSpecifications(     load_loss=1000,  # Transformer load loss [W]     nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]     no_load_loss=200,  # Transformer no-load loss [W]     amb_temp_surcharge=20,  # Ambient temperature surcharge [K] ) transformer = PowerTransformer(user_specs=tr_specs, cooling_type=CoolerType.ONAF) In\u00a0[2]: Copied! <pre>from transformer_thermal_model.cooler import CoolerType\nfrom transformer_thermal_model.hot_spot_calibration import calibrate_hotspot_factor\nfrom transformer_thermal_model.schemas import UserTransformerSpecifications\nfrom transformer_thermal_model.transformer import PowerTransformer\n\ntr_specs = UserTransformerSpecifications(\n    load_loss=1000,  # Transformer load loss [W]\n    nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]\n    no_load_loss=200,  # Transformer no-load loss [W]\n    amb_temp_surcharge=20,  # Ambient temperature surcharge [K]\n)\nuncalibrated_transformer = PowerTransformer(user_specs=tr_specs, cooling_type=CoolerType.ONAF)\ncalibrated_trafo = calibrate_hotspot_factor(\n    uncalibrated_transformer=uncalibrated_transformer,\n    ambient_temp=20.0,\n    hot_spot_limit=98,  # in most cases a hot-spot temperature limit of 98 can be used\n    hot_spot_factor_min=1.1,\n    hot_spot_factor_max=1.3,\n)\n</pre> from transformer_thermal_model.cooler import CoolerType from transformer_thermal_model.hot_spot_calibration import calibrate_hotspot_factor from transformer_thermal_model.schemas import UserTransformerSpecifications from transformer_thermal_model.transformer import PowerTransformer  tr_specs = UserTransformerSpecifications(     load_loss=1000,  # Transformer load loss [W]     nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]     no_load_loss=200,  # Transformer no-load loss [W]     amb_temp_surcharge=20,  # Ambient temperature surcharge [K] ) uncalibrated_transformer = PowerTransformer(user_specs=tr_specs, cooling_type=CoolerType.ONAF) calibrated_trafo = calibrate_hotspot_factor(     uncalibrated_transformer=uncalibrated_transformer,     ambient_temp=20.0,     hot_spot_limit=98,  # in most cases a hot-spot temperature limit of 98 can be used     hot_spot_factor_min=1.1,     hot_spot_factor_max=1.3, ) <p>The new hot-spot factor is available via <code>calibrated_trafo.specs.hot_spot_fac</code>, and from now on used in the thermal model.</p> In\u00a0[3]: Copied! <pre>print(calibrated_trafo.specs.hot_spot_fac)\n</pre> print(calibrated_trafo.specs.hot_spot_fac) <pre>1.1\n</pre> <p>The calibrated transformer is now ready to be used in the Model</p> In\u00a0[\u00a0]: Copied! <pre>model = Model(temperature_profile=profile_input, transformer=calibrated_trafo)\n\nresults = model.run()\n\n# Get the results as pd.Series, with the same datetime_index as your input.\ntop_oil_temp_profile = results.top_oil_temp_profile\nhot_spot_temp_profile = results.hot_spot_temp_profile\n</pre> model = Model(temperature_profile=profile_input, transformer=calibrated_trafo)  results = model.run()  # Get the results as pd.Series, with the same datetime_index as your input. top_oil_temp_profile = results.top_oil_temp_profile hot_spot_temp_profile = results.hot_spot_temp_profile"},{"location":"examples/hot-spot_calibration/#hot-spot-factor-calibration","title":"Hot-spot factor calibration\u00b6","text":""},{"location":"examples/hot-spot_calibration/#introduction","title":"Introduction\u00b6","text":"<p>In some cases, when modelling a power transformer, the hot-spot factor is not known. Then, hot-spot factor calibration is used to determine it. This is done based on a continuous nominal load with a duration of one week, a specified constant ambient temperature, and a hot-spot temperature limit, the hot-spot factor is calibrated to get as close as possible to 100% nominal load while staying within the 'hot_spot_factor_min' and 'hot_spot_factor_max' bounds.</p> <p>This example shows how to do this for a basic Power transformer.</p>"},{"location":"examples/hot-spot_calibration/#setup-inputprofile-and-transformer","title":"Setup Inputprofile and Transformer\u00b6","text":""},{"location":"examples/hot-spot_calibration/#determining-the-hot-spot-factor","title":"Determining the hot-spot factor\u00b6","text":"<p>The temperature in the model is modelled using the hot-spot factor (link will follow). This is a value between 1.1 and 1.3.</p> <p>When unknown, we have also provided a functionality to calibrate this value for power transformers only. When you have the rest of the specifications of your transformer:</p>"},{"location":"examples/power_transformer_example/","title":"Thermal modelling based on a dynamic profile and a power transformer","text":"<p>In this example the following concepts are shown:</p> <ul> <li>modelling a power transformer;</li> <li>setting transformer specifications;</li> <li>modelling with a dynamic load and ambient profile;</li> <li>comparing the results, top-oil and hot-spot temperature with temperature limits;</li> <li>calculating paper aging over time according to IEC 60076-7.</li> </ul> <p>Before we start modelling the transformer, we will first import all the required functions and classes.</p> In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom transformer_thermal_model.aging import aging_rate_profile, days_aged\nfrom transformer_thermal_model.cooler import CoolerType\nfrom transformer_thermal_model.model import Model\nfrom transformer_thermal_model.schemas import InputProfile, UserTransformerSpecifications\nfrom transformer_thermal_model.transformer import PaperInsulationType, PowerTransformer\n</pre> import matplotlib.pyplot as plt import numpy as np import pandas as pd  from transformer_thermal_model.aging import aging_rate_profile, days_aged from transformer_thermal_model.cooler import CoolerType from transformer_thermal_model.model import Model from transformer_thermal_model.schemas import InputProfile, UserTransformerSpecifications from transformer_thermal_model.transformer import PaperInsulationType, PowerTransformer In\u00a0[2]: Copied! <pre>datetime_index = [pd.to_datetime(\"2025-01-01 00:00:00\") + pd.Timedelta(minutes=15 * i) for i in np.arange(0, 288)]\n\nload_series = pd.Series(data=np.sin(np.arange(0, 288) * 900 * 2 * np.pi * 1 / 43200) * 500 + 500, index=datetime_index)\nambient_series = pd.Series(data=20, index=datetime_index)\n</pre> datetime_index = [pd.to_datetime(\"2025-01-01 00:00:00\") + pd.Timedelta(minutes=15 * i) for i in np.arange(0, 288)]  load_series = pd.Series(data=np.sin(np.arange(0, 288) * 900 * 2 * np.pi * 1 / 43200) * 500 + 500, index=datetime_index) ambient_series = pd.Series(data=20, index=datetime_index) In\u00a0[3]: Copied! <pre># Create an input object with the profiles\nmy_profile_input = InputProfile.create(\n    datetime_index=datetime_index, load_profile=load_series, ambient_temperature_profile=ambient_series\n)\n</pre> # Create an input object with the profiles my_profile_input = InputProfile.create(     datetime_index=datetime_index, load_profile=load_series, ambient_temperature_profile=ambient_series ) In\u00a0[4]: Copied! <pre>my_transformer_specifications = UserTransformerSpecifications(\n    load_loss=160000,  # Transformer load loss [W]\n    nom_load_sec_side=1600,  # Transformer nominal current secondary side [A]\n    no_load_loss=70000,  # Transformer no-load loss [W]\n    amb_temp_surcharge=10,  # Ambient temperature surcharge [K]\n    time_const_oil=150,  # Time constant oil [min]\n    time_const_windings=7,  # Time constant windings [min]\n    top_oil_temp_rise=50.5,  # Top-oil temperature rise [K]\n    winding_oil_gradient=23,  # Winding oil gradient (worst case) [K]\n    end_temp_reduction=0,  # Lowering of the end temperature with respect to the current specification [K]\n    hot_spot_fac=1.2,  # Hot-spot factor [-]\n    oil_const_k11=0.5,  # Oil constant k11 [-]\n    winding_const_k21=2.0,  # Winding constant k21 [-]\n    winding_const_k22=2.0,  # Winding constant k22 [-]\n    oil_exp_x=0.8,  # Oil exponent x [-]\n    winding_exp_y=1.3,  # Winding exponent x [-]\n)\nmy_transformer = PowerTransformer(user_specs=my_transformer_specifications, cooling_type=CoolerType.ONAF)\n</pre> my_transformer_specifications = UserTransformerSpecifications(     load_loss=160000,  # Transformer load loss [W]     nom_load_sec_side=1600,  # Transformer nominal current secondary side [A]     no_load_loss=70000,  # Transformer no-load loss [W]     amb_temp_surcharge=10,  # Ambient temperature surcharge [K]     time_const_oil=150,  # Time constant oil [min]     time_const_windings=7,  # Time constant windings [min]     top_oil_temp_rise=50.5,  # Top-oil temperature rise [K]     winding_oil_gradient=23,  # Winding oil gradient (worst case) [K]     end_temp_reduction=0,  # Lowering of the end temperature with respect to the current specification [K]     hot_spot_fac=1.2,  # Hot-spot factor [-]     oil_const_k11=0.5,  # Oil constant k11 [-]     winding_const_k21=2.0,  # Winding constant k21 [-]     winding_const_k22=2.0,  # Winding constant k22 [-]     oil_exp_x=0.8,  # Oil exponent x [-]     winding_exp_y=1.3,  # Winding exponent x [-] ) my_transformer = PowerTransformer(user_specs=my_transformer_specifications, cooling_type=CoolerType.ONAF) In\u00a0[5]: Copied! <pre>my_model = Model(temperature_profile=my_profile_input, transformer=my_transformer)\n\nresults = my_model.run()\n</pre> my_model = Model(temperature_profile=my_profile_input, transformer=my_transformer)  results = my_model.run() <p>The output, <code>results</code>, contains to output profiles: the top-oil temperature profile and the hot-spot temperature profile. They can be accessed using <code>results.hot_spot_temp_profile</code> and <code>results.top_oil_temp_profile</code>.</p> In\u00a0[6]: Copied! <pre>print(\"The first values of the hot-spot temperature profile are:\")\nprint(results.hot_spot_temp_profile.head())\n\nprint(\"And the first values of the top-oil temperature profile are:\")\nprint(results.top_oil_temp_profile.head())\n</pre> print(\"The first values of the hot-spot temperature profile are:\") print(results.hot_spot_temp_profile.head())  print(\"And the first values of the top-oil temperature profile are:\") print(results.top_oil_temp_profile.head()) <pre>The first values of the hot-spot temperature profile are:\n2025-01-01 00:00:00    30.000000\n2025-01-01 00:15:00    42.410763\n2025-01-01 00:30:00    46.262654\n2025-01-01 00:45:00    50.691503\n2025-01-01 01:00:00    54.556084\ndtype: float64\nAnd the first values of the top-oil temperature profile are:\n2025-01-01 00:00:00    30.000000\n2025-01-01 00:15:00    34.320281\n2025-01-01 00:30:00    38.040463\n2025-01-01 00:45:00    41.279628\n2025-01-01 01:00:00    44.129399\ndtype: float64\n</pre> <p>Because we did not use an initial temperature, the model sets the initial temperature to the ambient plus the temperature surcharge. When we do not know the actual initial temperatures a period should be cut off. Typically a period of 5 times the oil time constant in minutes is used: <code>my_transformer.specs.time_const_oil * 5</code>.  In this period the transformer had enough time to warm up or cool down to match the applied load and ambient temperature.</p> In\u00a0[7]: Copied! <pre>start_time = datetime_index[0] + pd.Timedelta(my_transformer.specs.time_const_oil * 5, \"m\")\n</pre> start_time = datetime_index[0] + pd.Timedelta(my_transformer.specs.time_const_oil * 5, \"m\") <p>Now that we have calculated the correct start time we use this to plot the top-oil and hotspot temperature to see how warm our transformer became.</p> In\u00a0[8]: Copied! <pre>fig = plt.figure()\nax = results.top_oil_temp_profile.loc[start_time::].plot(label=\"Top-oil temperature\", color=\"green\")\nresults.hot_spot_temp_profile.loc[start_time::].plot(label=\"Hot-spot temperature\", color=\"blue\")\nambient_series.loc[start_time::].plot(label=\"Ambient temperature\", color=\"red\")\nax.set_ylabel(\"Temperature [C]\")\nax.hlines(120, datetime_index[0], datetime_index[-1], linestyles=\"dashed\", label=\"Hot-spot limit\", color=\"blue\")\nax.hlines(105, datetime_index[0], datetime_index[-1], linestyles=\"dashed\", label=\"Top-oil limit\", color=\"green\")\nax.legend(loc=\"lower left\");\n</pre> fig = plt.figure() ax = results.top_oil_temp_profile.loc[start_time::].plot(label=\"Top-oil temperature\", color=\"green\") results.hot_spot_temp_profile.loc[start_time::].plot(label=\"Hot-spot temperature\", color=\"blue\") ambient_series.loc[start_time::].plot(label=\"Ambient temperature\", color=\"red\") ax.set_ylabel(\"Temperature [C]\") ax.hlines(120, datetime_index[0], datetime_index[-1], linestyles=\"dashed\", label=\"Hot-spot limit\", color=\"blue\") ax.hlines(105, datetime_index[0], datetime_index[-1], linestyles=\"dashed\", label=\"Top-oil limit\", color=\"green\") ax.legend(loc=\"lower left\"); <p>We added two more lines in the figure: two limits. These limits show how hot we allow the transformer to become to be used safely and without it to age to much. You can see that both calculated profiles are nicely below the limits.</p> In\u00a0[9]: Copied! <pre>aging_profile = aging_rate_profile(\n    hot_spot_profile=results.hot_spot_temp_profile.loc[start_time::],\n    insulation_type=PaperInsulationType.NORMAL,\n)\n</pre> aging_profile = aging_rate_profile(     hot_spot_profile=results.hot_spot_temp_profile.loc[start_time::],     insulation_type=PaperInsulationType.NORMAL, ) In\u00a0[10]: Copied! <pre>total_aging = days_aged(\n    hot_spot_profile=results.hot_spot_temp_profile.loc[start_time::],\n    insulation_type=PaperInsulationType.NORMAL,\n)\n</pre> total_aging = days_aged(     hot_spot_profile=results.hot_spot_temp_profile.loc[start_time::],     insulation_type=PaperInsulationType.NORMAL, ) In\u00a0[\u00a0]: Copied! <pre>fig = plt.figure()\nax = aging_profile.plot(label=\"Aging profile\")\nax.set_ylabel(\"Aging rate in days/day\")\n\nax.legend()\nax.set_title(\n    f\"Aging profile with total aging of {round(total_aging, 2)} days over a\"\n    \" total of {len(set(aging_profile.index.date))} days.\"\n);\n</pre> fig = plt.figure() ax = aging_profile.plot(label=\"Aging profile\") ax.set_ylabel(\"Aging rate in days/day\")  ax.legend() ax.set_title(     f\"Aging profile with total aging of {round(total_aging, 2)} days over a\"     \" total of {len(set(aging_profile.index.date))} days.\" );"},{"location":"examples/power_transformer_example/#thermal-modelling-based-on-a-dynamic-profile-and-a-power-transformer","title":"Thermal modelling based on a dynamic profile and a power transformer\u00b6","text":""},{"location":"examples/power_transformer_example/#input-profiles","title":"Input profiles\u00b6","text":"<p>The data, a load profile and an ambient temperature profile, are generated for this example and cover three days. The load is a simple sine with a wavelength of half a day. The ambient temperature is constant over the given period. In the next step they generated and combined into an <code>InputProfile</code> object.</p> <p>Note that the time series should have the same length and cover the exact same time period.</p> <p>Furthermore, the load and ambient temperature should be formatted as a list, a numpy array or a pandas series.</p>"},{"location":"examples/power_transformer_example/#transformer-object","title":"Transformer object\u00b6","text":"<p>The next step is to create a power transformer object. We will use a combination of default specifications and user defined specifications. The latter are set via <code>UserTransformerSpecifications</code>.</p>"},{"location":"examples/power_transformer_example/#setup-the-thermal-model-and-run","title":"Setup the thermal model and run\u00b6","text":"<p>Now it is time to create a model based on the transformer and the profiles and run the model to create a temperature profile of the top-oil and the hot-spot.</p>"},{"location":"examples/power_transformer_example/#paper-aging","title":"Paper aging\u00b6","text":"<p>Now we have seen that the temperature is not too high. We can also have a look at the aging of the transformer. The aging model used is, like the thermal model, also based the Loading Guide. The aging is calculated based on the type of paper insulation (which can be of type <code>PaperInsulationType.NORMAL</code> or <code>PaperInsulationType.TUP</code>) and the hotspot temperature profile.</p> <p>Again we cut off the heating period based on five times the oil constant.</p>"},{"location":"examples/quickstart/","title":"Quick start","text":"<p>In this quick start you will calculate the temperature progression of a power transformer exposed to a constant load during a summer week.</p> <p>Before we start modelling the transformer, we will first import all the required functions and classes.</p> In\u00a0[\u00a0]: Copied! <pre>import matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom transformer_thermal_model.cooler import CoolerType\nfrom transformer_thermal_model.model import Model\nfrom transformer_thermal_model.schemas import InputProfile, UserTransformerSpecifications\nfrom transformer_thermal_model.transformer import PowerTransformer\n</pre> import matplotlib.pyplot as plt import pandas as pd  from transformer_thermal_model.cooler import CoolerType from transformer_thermal_model.model import Model from transformer_thermal_model.schemas import InputProfile, UserTransformerSpecifications from transformer_thermal_model.transformer import PowerTransformer In\u00a0[2]: Copied! <pre>one_week = 4 * 24 * 7\ndatetime_index = pd.date_range(\"2025-07-01\", periods=one_week, freq=\"15min\")\n\n# The ambient temperature during this week is 20 degrees celsius\nambient_temp = 20\nambient_series = pd.Series([ambient_temp] * one_week, index=datetime_index)\n\n# And the transformer is exposed to a nominal load of 100 Ampere:\nload = 100\nload_series = pd.Series([load] * one_week, index=datetime_index)\n\n# Create an input object with the profiles\nmy_profile_input = InputProfile.create(\n    datetime_index=datetime_index, load_profile=load_series, ambient_temperature_profile=ambient_series\n)\n</pre> one_week = 4 * 24 * 7 datetime_index = pd.date_range(\"2025-07-01\", periods=one_week, freq=\"15min\")  # The ambient temperature during this week is 20 degrees celsius ambient_temp = 20 ambient_series = pd.Series([ambient_temp] * one_week, index=datetime_index)  # And the transformer is exposed to a nominal load of 100 Ampere: load = 100 load_series = pd.Series([load] * one_week, index=datetime_index)  # Create an input object with the profiles my_profile_input = InputProfile.create(     datetime_index=datetime_index, load_profile=load_series, ambient_temperature_profile=ambient_series ) In\u00a0[3]: Copied! <pre>my_transformer_specifications = UserTransformerSpecifications(\n    load_loss=1000,  # Transformer load loss [W]\n    nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]\n    no_load_loss=200,  # Transformer no-load loss [W]\n    amb_temp_surcharge=20,  # Ambient temperature surcharge [K]\n)\nmy_cooler_type = CoolerType.ONAN\nmy_transformer = PowerTransformer(user_specs=my_transformer_specifications, cooling_type=my_cooler_type)\n</pre> my_transformer_specifications = UserTransformerSpecifications(     load_loss=1000,  # Transformer load loss [W]     nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]     no_load_loss=200,  # Transformer no-load loss [W]     amb_temp_surcharge=20,  # Ambient temperature surcharge [K] ) my_cooler_type = CoolerType.ONAN my_transformer = PowerTransformer(user_specs=my_transformer_specifications, cooling_type=my_cooler_type) <p>The default specifications of a power transformer can be consulted with the <code>default</code> property:</p> In\u00a0[4]: Copied! <pre>my_transformer.defaults\n</pre> my_transformer.defaults Out[4]: <pre>DefaultTransformerSpecifications(time_const_oil=210.0, time_const_windings=10.0, top_oil_temp_rise=60.0, winding_oil_gradient=17.0, hot_spot_fac=1.3, oil_const_k11=0.5, winding_const_k21=2, winding_const_k22=2, oil_exp_x=0.8, winding_exp_y=1.3, end_temp_reduction=0.0)</pre> <p>The specifications that are used in the thermal model can be consulted in the <code>specs</code> property. Note that the <code>defaults</code> and the <code>specs</code> can differ and the specification that are used in the model are <code>my_transformer.specs</code>.</p> In\u00a0[5]: Copied! <pre>my_transformer.specs\n</pre> my_transformer.specs Out[5]: <pre>TransformerSpecifications(load_loss=1000.0, nom_load_sec_side=1500.0, no_load_loss=200.0, amb_temp_surcharge=20.0, time_const_oil=210.0, time_const_windings=10.0, top_oil_temp_rise=60.0, winding_oil_gradient=17.0, hot_spot_fac=1.3, oil_const_k11=0.5, winding_const_k21=2, winding_const_k22=2, oil_exp_x=0.8, winding_exp_y=1.3, end_temp_reduction=0.0)</pre> In\u00a0[6]: Copied! <pre>my_model = Model(temperature_profile=my_profile_input, transformer=my_transformer)\n\nresults = my_model.run()\n</pre> my_model = Model(temperature_profile=my_profile_input, transformer=my_transformer)  results = my_model.run() <p>The output, <code>results</code>, contains to output profiles: the top-oil temperature profile and the hot-spot temperature profile.</p> <p>Because we did not define an initial temperature, the model sets the initial temperature to the ambient plus the temperature surcharge. In reality, the transformer might have been warmer than ambient temperature due e.g. to previous loads. To compensate this, a warm-up period should be cut off. Typically a period of 5 times the oil time constant in minutes is used: <code>my_transformer.specs.time_const_oil * 5</code>.  In this period the transformer had enough time to warm up or cool down to match the applied load and ambient temperature</p> In\u00a0[7]: Copied! <pre>start_time = datetime_index[0] + pd.Timedelta(my_transformer.specs.time_const_oil * 5, \"m\")\n</pre> start_time = datetime_index[0] + pd.Timedelta(my_transformer.specs.time_const_oil * 5, \"m\") <p>Now we calculated the correct starting-time, we use this to plot the top-oil and hotspot temperature to see how warm our transformer is under this constant load.</p> In\u00a0[8]: Copied! <pre>fig = plt.figure()\nax = results.top_oil_temp_profile.loc[start_time::].plot(label=\"Top-oil temperature\")\nresults.hot_spot_temp_profile.loc[start_time::].plot(label=\"Hot-spot temperature\")\nambient_series.loc[start_time::].plot(label=\"Ambient temperature\")\nax.set_ylabel(\"Temperature [C]\")\n\nax.legend();\n</pre> fig = plt.figure() ax = results.top_oil_temp_profile.loc[start_time::].plot(label=\"Top-oil temperature\") results.hot_spot_temp_profile.loc[start_time::].plot(label=\"Hot-spot temperature\") ambient_series.loc[start_time::].plot(label=\"Ambient temperature\") ax.set_ylabel(\"Temperature [C]\")  ax.legend();"},{"location":"examples/quickstart/#quick-start","title":"Quick start\u00b6","text":""},{"location":"examples/quickstart/#introduction","title":"Introduction\u00b6","text":""},{"location":"examples/quickstart/#create-input-data","title":"Create input data\u00b6","text":"<p>First we will create data to simulate the ambient temperature during this summer week together with a constant load.</p> <p>Both profiles will have a duration of a week with a sampling time of 15 minutes.</p> <p>Note that other sampling times can be used, but preferably 15 minutes or lower.</p>"},{"location":"examples/quickstart/#a-transformer-object","title":"A transformer object\u00b6","text":"<p>The next step is to create a power transformer object. We will use the default specifications of the power transformer. Additionally, there are five mandatory specifications to be set:</p> <ul> <li>The nominal current at the secondary side [A]</li> <li>The load loss [W]</li> <li>The no-load loss [W]</li> <li>The ambient temperature surcharge [K]</li> <li>The cooling type (ONAN or ONAF)</li> </ul> <p>The first four specifications are set using the <code>UserTransformerSpecifications</code> object and the cooler type is selected using the CoolerType enumerator. Note that the values are chosen randomly.</p>"},{"location":"examples/quickstart/#running-the-thermal-model","title":"Running the thermal model\u00b6","text":"<p>Now it is time to create a <code>my_model</code> object from the <code>Model</code> class. This object is initiated with the my_transformer and the my_profiles object. Then we run the model to create a temperature profile of the top-oil and the hot-spot.</p>"},{"location":"examples/quickstart/#summary","title":"Summary\u00b6","text":"<p>In this quick start the basic principles of the Transformer Thermal Model are shown. You learned to model the top-oil and hot-spot temperature based on an <code>InputProfile</code> instance and a <code>Transformer</code> instance.</p> <p>For more detailed information and modelling with dynamic profiles you can go through the other examples.</p>"},{"location":"examples/simple_thermal_profile_example_distribution/","title":"Thermal modelling based on a dynamic profile and a distribution transformer","text":"<p>In this example the following concepts are shown:</p> <ul> <li>Modelling of a distribution transformer;</li> <li>Setting the minimal required transformer specifications;</li> <li>Modelling with a dynamic load and ambient profile.</li> </ul> <p>Before we start modelling the transformer, we will first import all the required functions and classes.</p> In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom transformer_thermal_model.model import Model\nfrom transformer_thermal_model.schemas import InputProfile, UserTransformerSpecifications\nfrom transformer_thermal_model.transformer import DistributionTransformer\n</pre> import matplotlib.pyplot as plt import numpy as np import pandas as pd  from transformer_thermal_model.model import Model from transformer_thermal_model.schemas import InputProfile, UserTransformerSpecifications from transformer_thermal_model.transformer import DistributionTransformer <p>The data, a load profile and an ambient temperature profile, are generated for this example and cover three days. The load is a simple sine with a wavelength of half a day. The ambient temperature is constant over the given period. The data can be combined into an <code>InputProfile</code> object.</p> In\u00a0[2]: Copied! <pre>datetime_index = [pd.to_datetime(\"2025-07-01 00:00:00\") + pd.Timedelta(minutes=15 * i) for i in np.arange(0, 288)]\n\nload_series = pd.Series(data=np.sin(np.arange(0, 288) * 900 * 2 * np.pi * 1 / 43200) * 500 + 500, index=datetime_index)\nambient_series = pd.Series(data=20, index=datetime_index)\n\n# Create an input object with the profiles\nprofile_input = InputProfile.create(\n    datetime_index=datetime_index, load_profile=load_series, ambient_temperature_profile=ambient_series\n)\n</pre> datetime_index = [pd.to_datetime(\"2025-07-01 00:00:00\") + pd.Timedelta(minutes=15 * i) for i in np.arange(0, 288)]  load_series = pd.Series(data=np.sin(np.arange(0, 288) * 900 * 2 * np.pi * 1 / 43200) * 500 + 500, index=datetime_index) ambient_series = pd.Series(data=20, index=datetime_index)  # Create an input object with the profiles profile_input = InputProfile.create(     datetime_index=datetime_index, load_profile=load_series, ambient_temperature_profile=ambient_series ) <p>The next step is to create a distribution transformer object. We will use the default specifications of the distribution transformer. Additionally, there are four mandatory specifications to be set:</p> <ul> <li>The nominal current at the secondary side [A]</li> <li>The load loss [W]</li> <li>The no-load loss [W]</li> <li>The ambient temperature surcharge [K]</li> </ul> <p>The four specifications are set using the <code>UserTransformerSpecifications</code> object.</p> <p>Note that the cooling type is ONAN by default for distribution transformers.</p> In\u00a0[3]: Copied! <pre>transformer_specifications = UserTransformerSpecifications(\n    load_loss=5200,  # Transformer load loss [W]\n    nom_load_sec_side=900,  # Transformer nominal current secondary side [A]\n    no_load_loss=800,  # Transformer no-load loss [W]\n    amb_temp_surcharge=10,  # Ambient temperature surcharge [K]\n)\ntransformer = DistributionTransformer(user_specs=transformer_specifications)\n</pre> transformer_specifications = UserTransformerSpecifications(     load_loss=5200,  # Transformer load loss [W]     nom_load_sec_side=900,  # Transformer nominal current secondary side [A]     no_load_loss=800,  # Transformer no-load loss [W]     amb_temp_surcharge=10,  # Ambient temperature surcharge [K] ) transformer = DistributionTransformer(user_specs=transformer_specifications) <p>The default specifications of a transformer can be consulted with the <code>default</code> property:</p> In\u00a0[4]: Copied! <pre>transformer.defaults\n</pre> transformer.defaults Out[4]: <pre>DefaultTransformerSpecifications(time_const_oil=180.0, time_const_windings=4.0, top_oil_temp_rise=60.0, winding_oil_gradient=23.0, hot_spot_fac=1.2, oil_const_k11=1.0, winding_const_k21=1, winding_const_k22=2, oil_exp_x=0.8, winding_exp_y=1.6, end_temp_reduction=0.0)</pre> <p>The specifications that are used in the thermal model can consulted in the <code>specs</code> property. Note that the <code>defaults</code> and the <code>specs</code> can differ.</p> In\u00a0[5]: Copied! <pre>transformer.specs\n</pre> transformer.specs Out[5]: <pre>TransformerSpecifications(load_loss=5200.0, nom_load_sec_side=900.0, no_load_loss=800.0, amb_temp_surcharge=10.0, time_const_oil=180.0, time_const_windings=4.0, top_oil_temp_rise=60.0, winding_oil_gradient=23.0, hot_spot_fac=1.2, oil_const_k11=1.0, winding_const_k21=1, winding_const_k22=2, oil_exp_x=0.8, winding_exp_y=1.6, end_temp_reduction=0.0)</pre> <p>Now it is time to create a model based on the transformer and the profiles and run the model to create a temperature profile of the top-oil and the hot-spot.</p> In\u00a0[6]: Copied! <pre>model = Model(temperature_profile=profile_input, transformer=transformer)\n\nresults = model.run()\n</pre> model = Model(temperature_profile=profile_input, transformer=transformer)  results = model.run() <p>The output, <code>results</code>, contains to output profiles: the top-oil temperature profile and the hot-spot temperature profile. Lets plot them to see how warm our transformer became in this summer week.</p> In\u00a0[7]: Copied! <pre>fig = plt.figure()\nax = results.top_oil_temp_profile.plot(label=\"Top-oil temperature\")\nresults.hot_spot_temp_profile.plot(label=\"Hot-spot temperature\")\nambient_series.plot(label=\"Ambient temperature\")\nax.set_ylabel(\"Temperature [C]\")\n\nax.legend();\n</pre> fig = plt.figure() ax = results.top_oil_temp_profile.plot(label=\"Top-oil temperature\") results.hot_spot_temp_profile.plot(label=\"Hot-spot temperature\") ambient_series.plot(label=\"Ambient temperature\") ax.set_ylabel(\"Temperature [C]\")  ax.legend(); In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/simple_thermal_profile_example_distribution/#thermal-modelling-based-on-a-dynamic-profile-and-a-distribution-transformer","title":"Thermal modelling based on a dynamic profile and a distribution transformer\u00b6","text":""},{"location":"get_started/about/","title":"Installation and overview","text":""},{"location":"get_started/about/#transformer-thermal-model","title":"Transformer thermal model","text":"<p><code>transformer-thermal-model</code> is a library for modelling the transformer top-oil and hot-spot temperature based on the transformer specifications, a load profile and an ambient temperature profile. The model is an implementation according to the standard IEC 60076-7, also known as de Loading Guide.</p>"},{"location":"get_started/about/#installation","title":"Installation","text":""},{"location":"get_started/about/#install-from-pypi","title":"Install from PyPI","text":"<p>You can directly install the package from PyPI.</p> <pre><code>pip install transformer-thermal-model\n</code></pre>"},{"location":"get_started/about/#structure-of-the-code","title":"Structure of the code","text":"<p>This package contains the following modules to work with:</p> <ul> <li><code>transformer_thermal_model.model</code>: the core of the package to calculate a temperature profile of a transformer using the thermal model;</li> <li><code>transformer_thermal_model.transformer</code>: a module containing multiple   transformer classes to be used to define a transformer;</li> <li><code>transformer_thermal_model.cooler</code>: a module containing the enumerators to define the cooler type of the transformer;</li> <li><code>transformer_thermal_model.schemas</code>: in schemas one can find a.o. the definition of the model interfaces and how the transformer specificitations should be specified;</li> <li><code>transformer_thermal_model.hot_spot_calibration</code>: a module that is used to determine the transformer hot-spot factor to be used in the thermal model.</li> </ul> <p>The following modules contain elements that are not required for thermal modelling but are used to get more insight in aging and load capacity:</p> <ul> <li><code>transformer_thermal_model.aging</code>: a module to calculate the aging of a transformer according to IEC 60076-7 paragraph 6.3;</li> <li><code>transformer_thermal_model.components</code>: a module containing enumerators to define components of a power transformer if one wants to calculate the relative load capacity of each component in the transformer.</li> </ul>"},{"location":"get_started/about/#how-to-create-a-transformer","title":"How to create a transformer","text":"<p>Before performing a calculation, a transformer object must be created with all necessary details about the transformer.  Default values will be used for any attribute not specified by the user.</p> <p><code>transformer_thermal_model.transformer</code>: This module has multiple <code>Transformer</code> children, which will be elements used for the temperature calculation inside <code>Model</code>.</p> <ul> <li><code>PowerTransformer</code>: A power transformer class, child of the <code>Transformer</code>   class.</li> <li><code>DistributionTransformer</code>: A distribution transformer class, also child of   the <code>Transformer</code> class.</li> <li><code>TransformerType</code> (<code>Enum</code>): For easily checking all available types. Does not    have any use in our code, but might be useful for your use-case.</li> </ul>"},{"location":"get_started/about/#transformer-specifications","title":"Transformer specifications","text":"<p>A <code>Transformer</code> needs a couple of specifications (<code>user_specs</code>) and a cooling type (in <code>cooling_type</code>). The specifications are defined in <code>transformer_thermal_model.schemas.UserTransformerSpecifications</code>, and are a composition of some mandatory specifications and some optionals. When the optionals are left unchanged, the default values per class will be used. These can be found by <code>defaults</code>, e.g. <code>PowerTransformer.defaults</code> will show you the default specifications.</p> <p>An example on how to initialise a <code>PowerTransformer</code>:</p> <pre><code>from transformer_thermal_model.cooler import CoolerType\nfrom transformer_thermal_model.transformer import PowerTransformer\nfrom transformer_thermal_model.schemas import UserTransformerSpecifications\n\ntr_specs = UserTransformerSpecifications(\n   load_loss=1000,  # Transformer load loss [W]\n   nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]\n   no_load_loss=200,  # Transformer no-load loss [W]\n   amb_temp_surcharge=20,  # Ambient temperature surcharge [K]\n)\ntransformer = PowerTransformer(user_specs=tr_specs, cooling_type=CoolerType.ONAF)\n</code></pre> <p>It is recommended to adjust the following parameters when modelling a specific transformer as these influence the thermal modelling and are transformer-specifically defined (the ones with a '*' are mandatory):</p> <ul> <li><code>load_loss</code>*: load loss of the transformer.</li> <li><code>no_load_loss</code>*: no load loss of the transformer.</li> <li><code>nom_load_sec_side</code>*: nominal current of the secondary side of   the transformer.</li> <li><code>amb_temp_surcharge</code>*:</li> <li><code>PowerTransformer</code>: temperature surcharge on ambient temperature due to     installation conditions.</li> <li><code>DistributionTransformer</code>: Building or placement thermal classification.</li> <li><code>top_oil_temp_rise</code>: top-oil temperature increase under   nominal conditions.</li> <li><code>winding_oil_gradient</code>: temperature difference between the average winding and average oil temperature under nominal conditions</li> <li><code>hot_spot_fac</code>: factor determining the temperature difference between top-oil and hot-spot. Only specify when known, otherwise see hot-spot factor calibration.</li> </ul>"},{"location":"get_started/about/#cooler","title":"Cooler","text":"<p><code>transformer_thermal_model.cooler</code>: Similarly, you must provide the type of cooling of your transformer. This is only for a <code>PowerTransformer</code>, since a <code>DistributionTransformer</code> is always ONAN. To adjust the cooler type for a <code>PowerTransformer</code>, you can do the following:</p> <pre><code>from transformer_thermal_model.transformer import PowerTransformer\nfrom transformer_thermal_model.cooler import CoolerType\nfrom transformer_thermal_model.schemas import UserTransformerSpecifications\n\ntr_specs = UserTransformerSpecifications(\n                load_loss=10000,\n                nom_load_sec_side=1000,\n                no_load_loss=1000,\n                amb_temp_surcharge=0,\n            )\n\n# You can create a power transformer with ONAF cooling.\nonaf_trafo = PowerTransformer(user_specs = tr_specs, cooling_type = CoolerType.ONAF)\n# Or you can create a power transformer with ONAN cooling\nonan_trafo = PowerTransformer(user_specs = tr_specs, cooling_type = CoolerType.ONAN)\n</code></pre>"},{"location":"get_started/about/#hot-spot-factor-calibration-for-power-transformers","title":"Hot-spot factor calibration for power transformers","text":"<p>When the hot-spot factor of a transformer is known, it can be given as a specification as <code>hot_spot_fact</code> in a <code>UserTransformerSpecifications</code> object.</p> <p>It often occurs, however, that a transformer hot-spot factor is not known. If this is the case, a hot-spot factor calibration can be performed to determine the hot-spot factor of a given <code>PowerTransformer</code> object. Note that for <code>DistributionTransformer</code> objects, hot-spot calibrations should not be performed and the default value can be used. For both the <code>PowerTransformer</code> and the <code>DistributionTransformer</code> the <code>hot_spot_fac</code> in the specification is set to the default value of no hot-spot factor is provided via the <code>UserTransformerSpecifications</code>.</p> <p>The following example shows how to calibrate a <code>PowerTransformer</code> object.</p> <pre><code>from transformer_thermal_model.cooler import CoolerType\nfrom transformer_thermal_model.schemas import UserTransformerSpecifications\nfrom transformer_thermal_model.transformer import PowerTransformer\nfrom transformer_thermal_model.hot_spot_calibration import calibrate_hotspot_factor\n\ntr_specs = UserTransformerSpecifications(\n   load_loss=1000,  # Transformer load loss [W]\n   nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]\n   no_load_loss=200,  # Transformer no-load loss [W]\n   amb_temp_surcharge=20,  # Ambient temperature surcharge [K]\n)\nuncalibrated_transformer = PowerTransformer(user_specs=tr_specs, cooling_type=CoolerType.ONAF)\ncalibrated_trafo = calibrate_hotspot_factor(\n   uncalibrated_transformer=uncalibrated_transformer,\n   ambient_temp=20.0,\n   hot_spot_limit=98, # in most cases a hot-spot temperature limit of 98 can be used\n   hot_spot_factor_min=1.1,\n   hot_spot_factor_max=1.3,\n)\n</code></pre> <p>The new hot-spot factor is available via <code>calibrated_trafo.specs.hot_spot_fac</code>, and from now on used in the thermal model.</p> <pre><code>&gt;&gt;&gt; print(calibrated_trafo.specs.hot_spot_fac)\n1.1\n</code></pre>"},{"location":"get_started/about/#component-capacities-of-a-power-transformer","title":"Component capacities of a power transformer","text":"<p>For load capacity calculations it can be required to take into account the capacity of the different components of a power transformers. Therefore a functionality is available to calculate the relative capacity of the tap changers, the bushings (primary and secondary) and the internal current transformer. The capacity is defined as the ratio of the component capacity and the nominal load of the transformer.</p> <p>The capacities are properties of the <code>PowerTransformer</code> and require the <code>TransformerComponentSpecifications</code> to be given during initiating a PowerTransformer object.</p> <p>In the following example for all components the required information is provided.</p> <pre><code>from transformer_thermal_model.components import BushingConfig, TransformerSide, VectorConfig\nfrom transformer_thermal_model.cooler import CoolerType\nfrom transformer_thermal_model.schemas import (\n    TransformerComponentSpecifications,\n    UserTransformerSpecifications,\n)\nfrom transformer_thermal_model.transformer import PowerTransformer\n\ncomp_specs = TransformerComponentSpecifications(\n        tap_chang_capacity=600,  # Tap changer nominal current [A]\n        nom_load_prim_side=550,  # Transformer nominal current primary side [A]\n        tap_chang_conf=VectorConfig.TRIANGLE_OUTSIDE,  # Tap Changer configuration\n        tap_chang_side=TransformerSide.SECONDARY,  # Tap changer side\n        prim_bush_capacity=600,  # Primary bushing nominal current [A]\n        prim_bush_conf=BushingConfig.SINGLE_BUSHING,  # Primary bushing configuration\n        sec_bush_capacity=1800,  # Secondary bushing nominal current [A]\n        sec_bush_conf=BushingConfig.SINGLE_BUSHING,  # Secondary bushing configuration\n        cur_trans_capacity=1300,  # Current transformer nominal current [A]\n        cur_trans_conf=VectorConfig.STAR,  # Current transformer configuration\n        cur_trans_side=TransformerSide.PRIMARY,  # Current transformer side\n    )\nuser_specs = UserTransformerSpecifications(\n        load_loss=1000,  # Transformer load loss [W]\n        nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]\n        no_load_loss=200,  # Transformer no-load loss [W]\n        amb_temp_surcharge=20,\n    )\npower_transformer = PowerTransformer(\n        user_specs=user_specs, cooling_type=CoolerType.ONAF, internal_component_specs=comp_specs\n    )\n</code></pre> <p>The resulting component capacities are available in <code>power_transformer.component_capacities</code>:</p> <pre><code>&gt;&gt;&gt; print(power_transformer.component_capacities)\n{'tap_changer': 0.4, 'primary_bushings': 1.0909090909090908, 'secondary_bushings': 1.2, 'current_transformer': 2.3636363636363638}\n</code></pre> <p>Note that it is also possible to only define a subset of the components if not all components are present. Then only the component capacities of the provided components are available:</p> <pre><code>comp_specs = TransformerComponentSpecifications(\n    tap_chang_capacity=600,  # Tap changer nominal current [A]\n    nom_load_prim_side=550,  # Transformer nominal current primary side [A]\n    tap_chang_conf=VectorConfig.TRIANGLE_OUTSIDE,  # Tap Changer configuration\n    tap_chang_side=TransformerSide.SECONDARY,  # Tap changer side\n)\npower_transformer = PowerTransformer(\n        user_specs=user_specs, cooling_type=CoolerType.ONAF, internal_component_specs=comp_specs\n    )\n</code></pre> <p>This will generate the following result:</p> <pre><code>&gt;&gt;&gt; print(power_transformer.component_capacities)\n{'tap_changer': 0.4, 'primary_bushings': None, 'secondary_bushings': None, 'current_transformer': None}\n</code></pre>"},{"location":"get_started/about/#thermal-modelling","title":"Thermal modelling","text":"<p>When a <code>Transformer</code> object is completely defined, the temperatures can be calculated using <code>transformer_thermal_model.model</code>: the core of the package. The <code>Model</code> is built as follows:</p> <pre><code>import pandas as pd\n\nfrom transformer_thermal_model.model import Model\nfrom transformer_thermal_model.cooler import CoolerType\nfrom transformer_thermal_model.schemas import UserTransformerSpecifications, InputProfile\nfrom transformer_thermal_model.transformer import PowerTransformer\n\n# In this example the model is used to calculate the transformer temperature based on a load and ambient\n# profile with a period of one week. Any duration can be chosen preferably with timestamps with an interval of\n# 15 minute or lower. Larger timesteps will result in incorrect results but it *is* possible to calculate with them.\none_week = 4*24*7\ndatetime_index = pd.date_range(\"2020-01-01\", periods=one_week, freq=\"15min\")\n\n# For the load (in A) and ambient temperature (in C) arbitrary constants profiles are chosen.\n# It is also possible to use a realistic profile.\nnominal_load = 100\nload_points = pd.Series([nominal_load] * one_week, index=datetime_index)\nambient_temp = 21\ntemperature_points = pd.Series([ambient_temp] * one_week, index=datetime_index)\n\n# Create an input object with the profiles\nprofile_input = InputProfile.create(\n   datetime_index = datetime_index,\n   load_profile = load_points,\n   ambient_temperature_profile = temperature_points\n)\n\n# Initialise a power transformer with cooling type ONAF and, besides the mandatory user specifications, default values.\ntr_specs = UserTransformerSpecifications(\n   load_loss=1000,  # Transformer load loss [W]\n   nom_load_sec_side=1500,  # Transformer nominal current secondary side [A]\n   no_load_loss=200,  # Transformer no-load loss [W]\n   amb_temp_surcharge=20,  # Ambient temperature surcharge [K]\n)\ntransformer = PowerTransformer(user_specs=tr_specs, cooling_type=CoolerType.ONAF)\nmodel = Model(\n   temperature_profile = profile_input,\n   transformer = transformer\n)\n\nresults = model.run()\n\n# Get the results as pd.Series, with the same datetime_index as your input.\ntop_oil_temp_profile = results.top_oil_temp_profile\nhot_spot_temp_profile = results.hot_spot_temp_profile\n</code></pre> <pre><code>&gt;&gt;&gt; top_oil_temp_profile.head(3)\n2020-01-01 00:00:00    41.000000\n2020-01-01 00:15:00    43.639919\n2020-01-01 00:30:00    45.801302\n\n&gt;&gt;&gt; hot_spot_temp_profile.head(3)\n2020-01-01 00:00:00    41.000000\n2020-01-01 00:15:00    44.381177\n2020-01-01 00:30:00    46.443459\n</code></pre> <p>You can use the <code>Model</code> to run a calculation with either a <code>PowerTransformer</code> or a <code>DistributionTransformer</code>. The model will return <code>results</code> with the <code>top_oil_temperature</code> and <code>hot_spot_temperature</code> as <code>pd.Series</code>. More specifically, the output will be in the form of <code>OutputProfile</code>, as defined in <code>transformer_thermal_model.schemas</code>. The reason for using pd.Series as output, is that the model uses the <code>index</code> of the series that you have provided to run the calculation, which also creates the benefit for you that you can relate the result to your provided input for eventual cross-validation or analysis.</p>"},{"location":"get_started/about/#license","title":"License","text":"<p>This project is licensed under the Mozilla Public License, version 2.0 - see LICENSE for details.</p>"},{"location":"get_started/about/#licenses-third-party-libraries","title":"Licenses third-party libraries","text":"<p>This project includes third-party libraries, which are licensed under their own respective Open-Source licenses. SPDX-License-Identifier headers are used to show which license is applicable.</p> <p>The concerning license files can be found in the LICENSES directory.</p>"},{"location":"get_started/about/#contributing","title":"Contributing","text":"<p>Please read CODE_OF_CONDUCT, CONTRIBUTING and PROJECT GOVERNANCE for details on the process for submitting pull requests to us.</p>"},{"location":"get_started/about/#contact","title":"Contact","text":"<p>Please read SUPPORT for how to connect and get into contact with the Transformer Thermal Model project.</p>"},{"location":"get_started/model_input/","title":"Model input","text":""},{"location":"get_started/model_input/#model-input","title":"Model input","text":"<p>The thermal model requires four inputs:</p> <ol> <li>Relevant transformer specifications</li> <li>Load profile</li> <li>Ambient temperature profile</li> <li>Initial value hot-spot and top-oil temperature</li> </ol>"},{"location":"get_started/model_input/#relevant-transformer-specifications","title":"Relevant transformer specifications","text":"<p>Below are all transformer-specific properties that influence the thermal behavior of the transformer:</p>"},{"location":"get_started/model_input/#nominal-secondary-current","title":"Nominal secondary current","text":"<ul> <li> <p>Unit: Amp\u00e8re.</p> </li> <li> <p>Description: The nominal current on the secondary side of the transformer. When the transformer carries this current on the secondary side, we refer to it as 100% loading of the transformer.</p> </li> <li> <p>Source: Nameplate on the transformer or Factory Acceptance Test (FAT) report.</p> </li> <li> <p>Fallback/guarantee value: n/a (always known)</p> </li> </ul>"},{"location":"get_started/model_input/#no-load-loss","title":"No-load loss","text":"<ul> <li>Unit: Watt.</li> <li>Description: The no-load loss refers to the losses within a transformer that are always present when the transformer is energized, even when there is no load connected to the transformer. These losses occur in the core of the transformer, which is magnetized by the alternating current. For this reason, they are also called iron losses or core losses. These losses mostly translate into heat, making this parameter an important thermal property.</li> <li>Source:  Factory Acceptance Test (FAT) report: during these tests, a no-load test is performed to determine these losses. This test is conducted individually for each transformer.</li> <li>Fallback/guarantee value: This value is usually known.</li> </ul>"},{"location":"get_started/model_input/#short-circuit-loss","title":"Short-circuit loss","text":"<ul> <li>Unit: Watt.</li> <li>Description: The short-circuit loss is the counterpart of the no-load loss. This type of loss is load-dependent and represents the losses in the windings due to resistance. For this reason, they are also called copper losses. These losses are quadratically dependent on the current.</li> <li>Source: Factory Acceptance Test (FAT) report: during these tests, a short-circuit test is performed to determine the short-circuit losses at a nominal short-circuit current. This test is conducted individually for each transformer.</li> <li>Fallback/guarantee value: This value is usually known.</li> </ul>"},{"location":"get_started/model_input/#top-oil-temperature-rise","title":"Top-oil temperature rise","text":"<ul> <li>Unit: Kelvin.</li> <li>Description: The top-oil temperature is the temperature at the top of the transformer. During a heating test of the transformer, this temperature is measured under nominal and constant load. The top-oil temperature rise indicates how much the temperature of the top-oil rises above the ambient temperature when it stabilizes under these nominal conditions.</li> <li> <p>Source: Factory Acceptance Test (FAT) report: during these tests, a temperature-rise test is performed on the transformer. Often, this test is only performed for one transformer per series. If the information is not available for a specific transformer, a temperature-rise test of a comparable transformer can be used.</p> </li> <li> <p>Fallback/guarantee value: If no temperature-rise test is available for any transformer in the series, the guaranteed value of the top-oil temperature rise can be used. For all modern transformers, this is 60 Kelvin. For very old transformers, this can sometimes fall back to 55 or 50 Kelvin. These guaranteed values can always by found on the type plate.</p> </li> </ul>"},{"location":"get_started/model_input/#winding-oil-gradient","title":"Winding-oil gradient","text":"<ul> <li>Unit: Kelvin.</li> <li>Description: To determine the temperature drop between the winding and the oil, the winding-oil gradient is an important thermal property of a transformer. This can also be determined during a temperature-rise test by taking the difference between the average oil temperature rise and the average winding temperature rise.</li> <li>Source: Factory Acceptance Test (FAT) report: during these tests, a temperature-rise test is performed on the transformer. Often, this test is only performed for one transformer per series. If the information is not available for a specific transformer, a comparable transformer can be used.</li> <li>Fallback/guarantee value: The average oil temperature rise is not always known from a heating test. In that case, the average oil temperature rise can be estimated at 80% of the top-oil temperature rise. If the average winding temperature rise is not known, the guarantee value can be used. For all modern transformers, this is 65 Kelvin. For very old transformers, this can sometimes fall back to 60 or 55 Kelvin. Assuming a 60 Kelvin top-oil temperature rise and a 65 Kelvin average winding temperature rise, a gradient of 17 Kelvin can be assumed (gradient = (average winding temperature) - 0.8*(top-oil temperature)).</li> </ul>"},{"location":"get_started/model_input/#hot-spot-factor","title":"Hot-spot factor","text":"<ul> <li>Unit: unitless.</li> <li> <p>Description: The hot-spot factor, together with the gradient, indicates the difference between the hot-spot temperature and the top-oil temperature.</p> </li> <li> <p>Source: Factory Acceptance Test (FAT) report: during these tests, a temperature-rise test is performed on the transformer. Often, this test is only performed for one transformer per series. If the information is not available for a specific transformer, a comparable transformer can be used.</p> </li> <li> <p>Fallback/guarantee value: The hot-spot factor is often not known from the temperature-rise test. In that case, the worst-case hot-spot factor of 1.3 can be used. It is generally expected that the hot-spot factor ranges between 1.1 and 1.3. Whether these are indeed the most extreme limits is not certain. It should be noted that for older transformers, the hot-spot factor can be much higher. This is due to the use of solid wire, where eddy current losses in the upper regions of the windings are higher than with modern CTC wire (= continuously transposed conductor).</p> </li> <li> <p>Hot-spot factor calibration: The hot-spot factor can be calibrated using the model. For more information, see Hot-spot factor calibration.</p> </li> </ul>"},{"location":"get_started/model_input/#cooling-type","title":"Cooling type","text":"<ul> <li>Unit: n/a</li> <li> <p>Description: The transformer can generally be cooled in two ways:</p> </li> <li> <p>ONAN: Oil Natural, Air Natural. In this type of transformer, both the flow of the oil and the flow of the   air along the radiators are natural. The oil is heated, rises, and is pushed into the radiators without actively   forcing this flow to appear. The oil then cools in the radiators, sinks down, and is pushed into the oil tank. The air   between the radiators is heated and rises. This creates a natural airflow along the radiators.</p> </li> <li> <p>ONAF: Oil Natural, Air Forced. The difference with ONAN is that fans are placed under the radiators. These   force an active airflow between the radiators. This allows the oil to more easily transfer its heat to the   environment.</p> </li> <li> <p>Source: Nameplate on the transformer.</p> </li> <li> <p>Fallback/guarantee value: n/a</p> </li> </ul>"},{"location":"get_started/model_input/#ambient-temperature-surcharge","title":"Ambient temperature surcharge","text":"<ul> <li>Unit: Kelvin.</li> <li>Description: This parameter is used differently for distribution and power transformers:</li> <li>Power transformers: For this type of transformer it is expected to be placed outside. In that case, this     parameter should be set to 0 and does nothing. In some cases, however, power transformers are placed inside. In that     situation, it is more difficult for the heat to escape the surroundings of the transformer. Therefore, a 10 Kelvin     temperature surcharge can be filled in here, which will be added to the ambient temperature to compensate for this     phenomenon. Other values can of course also be chosen.</li> <li>Distribution transformers: Distribution transformers are (in the Netherlands) always placed inside. Still, a     distinction can be made between compact and normal stations. As the name suggests, compact stations have a lot less     free space, which means the surroundings heat up a lot quicker. To take this phenomenon into account a temperature     surcharge can be added to the rated top-oil temperature rise, which is also a transformer specification.</li> <li>Source:: n/a</li> <li>Fallback/guarantee value: n/a</li> </ul>"},{"location":"get_started/model_input/#relevant-constants-for-winding-and-oil","title":"Relevant constants for winding and oil","text":"<p>The transformer model uses several constants that characterize the thermal behavior of the windings and the oil in the transformer. Values for these constants can be experimentally determined. The loading guide also recommends some conservative values for these constants (IEC 60076-7, Table 4):</p> <ul> <li> <p>Oil exponent x: Determines how the top-oil temperature depends on the load level and the losses of the transformer.</p> </li> <li> <p>Winding exponent y: Determines how the gradient depends on the load level of the transformer.</p> </li> <li> <p>Oil constant \\(k_{11}\\): Empirical model parameter.</p> </li> <li> <p>Winding constant \\(k_{21}\\): Empirical model parameter.</p> </li> <li> <p>Winding constant \\(k_{22}\\): Empirical model parameter.</p> </li> <li> <p>Oil time constant \\(\u03c4_o\\):  the tau time in minutes for the oil. This number governs the rate at which the oil reaches its final temperature.</p> </li> <li> <p>Winding time constant \\(\u03c4_w\\): the tau time in minutes for the winding. This number governs the rate at with which the windings reach their final temperature.</p> </li> </ul>"},{"location":"theoretical_documentation/hotspot_calibration/","title":"Hot-spot factor calibration","text":""},{"location":"theoretical_documentation/hotspot_calibration/#hot-spot-factor-calibration","title":"Hot-spot factor calibration","text":"<p>When the hot-spot factor is uncertain or unknown, a calibration can be performed to determine it. Note that this method for finding the hot-spot factor is designed for power transformers, and should therefore not be used for distribution transformers. This calibration is based on the static limits that are described in the IEC 60076-1 paragraph 4.2 and IEC 60076-2 Table 1 (see also Thermal limits). For normal paper, it is assumed that the hot-spot temperature reaches 98\u00b0C when the load is 100% and the ambient temperature is 20\u00b0C.</p> <p>During the calibration, a constant load profile of 100% and a constant ambient temperature profile of 20\u00b0C is inserted into the model until a stable end temperature is reached for the transformer hot-spot. Next, the hot-spot factor is adjusted until this end temperature is 98\u00b0C.</p> <p>The resulting hot-spot factor is then clipped between the values 1.1 and 1.3 as these are considered realistic values for the hot-spot factor. Note that it is also possible to choose other values for the end temperature and the hot-spot factor bounds.</p>"},{"location":"theoretical_documentation/model_description/","title":"Model description","text":""},{"location":"theoretical_documentation/model_description/#model-description","title":"Model description","text":""},{"location":"theoretical_documentation/model_description/#relevant-temperatures","title":"Relevant temperatures","text":"<p>Inside a transformer, there are many different components, each with its own thermal behavior. This makes a transformer thermally a very complex system. To say something about the thermal behavior of a transformer, it can be simplified by only looking at the oil temperature and the winding temperature. With this simplifications there are a few specific temperatures and parameters that are important to consider:</p> <ul> <li> <p>Top-oil temperature - temperature of the oil at the very top of the transformer. As this is generally also the highest oil temperature in the transformer, it is one of the two temperatures that is modelled with this package.</p> </li> <li> <p>Oil temperature outflow windings - temperature of the oil at the top of   the windings.</p> </li> <li> <p>Average oil temperature - temperature of the oil in the middle of the   tank. It is assumed that there is a linear relationship between the height in   the tank and the oil temperature. For this reason, the temperature of the oil in the middle of the tank is equated to the   average oil temperature in the tank.</p> </li> <li> <p>Oil temperature inflow windings - temperature of the oil at the bottom   of the windings.</p> </li> <li> <p>Average winding temperature - winding temperature in the middle (in   terms of height) of the transformer. This temperature is often determined by a   resistance measurement.</p> </li> <li> <p>Gradient - temperature difference between the average oil temperature and the average winding temperature.</p> </li> <li> <p>Hot-spot temperature - Temperature of the windings at the hottest point.   This point is usually just below the top of the windings. Together with the top-oil temperature, this is one of the   two temperatures that is modelled with this package.</p> </li> <li> <p>Hot-spot factor - It is assumed that the difference between the top-oil   temperature and the hot-spot temperature is greater than the difference   between the average oil temperature and the average winding temperature   (i.e., the gradient). This is quantified with the Hot-spot factor. This   factor, multiplied by the gradient, indicates the difference between the Hot-spot temperature and   the top-oil temperature.</p> </li> </ul> <p>The thermal model can model the top-oil temperature and the hot-spot temperature based on the thermal properties of the transformer. These are the most indicative temperatures because they indicate the highest temperatures for the oil and the windings. Additionally, the standard (IEC 60076-7) also prescribes temperature limits for these two quantities.</p>"},{"location":"theoretical_documentation/model_description/#model-equations","title":"Model equations","text":"<p>As discussed in the previous section, there are different specific locations in the transformer where the temperature can be determined. This package focuses on modelling the top-oil and hot-spot temperature as these indicate the highest oil and winding temperatures, respectively. The equations below describe how these two temperatures are modelled. In essence, package uses a recursive method where the temperature at the next time step is calculated using the current temperature. This means an initial value has to be set (or the package initializes the transformer at ambient temperatures).</p>"},{"location":"theoretical_documentation/model_description/#top-oil-temperature","title":"Top-oil temperature","text":"<p>The model calculates the top-oil temperature at time \\(t\\) as follows:</p> \\[ \\theta_\\text{o}[t] =     \\theta_\\text{o}[t-1] +     \\left[         \\theta_\\text{a}[t] + \\Delta\\theta_\\text{or} \\cdot         \\left[             \\frac{1+R \\cdot {K[t]}^2}{1 + R}         \\right]^x -         \\theta_\\text{o}[t-1]     \\right] \\cdot     \\left[         1 - \\exp(- \\frac{\\rm d t}{\\tau_\\text{o}k_{11}})     \\right], \\] <p>where:</p> <ul> <li>\\(\\theta_{\\rm o}[t]\\): top-oil temperature at time step t;</li> <li>\\(\\theta_{\\rm o}[t-1]\\): top-oil temperature at the previous timestep;</li> <li>\\(\\theta_{a}[t]\\): ambient temperature at time step t;</li> <li>\\(\u0394\u03b8_{or}\\): top-oil temperature rise (from the temperature-rise-test);</li> <li>\\(R\\): ratio of short-circuit and no-load loss;</li> <li>\\(K[t]\\): load level as a percentage of nominal at time step t;</li> <li>\\(x\\): oil exponent;</li> <li>\\(dt\\): time step size in minutes;</li> <li>\\(\u03c4_{\\rm o}\\): oil time constant;</li> <li>\\(k_{11}\\): oil constant.</li> </ul> <p>The equation for the top-oil temperature consists of several parts. First, the top-oil temperature from the previous time step is taken as the starting point. Then, it is determined what the temperature of the oil would converge to under the current load level and ambient temperature. The difference between this final temperature and the top-oil temperature at the previous time step is calculated in the middle section of the formula (between the large square brackets). Because the transformer does not immediately reach the final temperature but reacts with a certain inertia (according to Newton's heating/cooling law), a delaying part is added to the equation in the rightmost square brackets. This inertia is dependent on the oil time constant.</p>"},{"location":"theoretical_documentation/model_description/#hot-spot-temperature","title":"Hot-spot temperature","text":"<p>The hot-spot temperature rise above the top-oil temperature at time t can be calculated as follows:</p> \\[ \\Delta\\theta_{\\text{h}}[t] = \\Delta\\theta_{\\text{h}}[t-1] +     \\left[       H \\cdot gr \\cdot K^{y}[t] - \\Delta\\theta_{\\text{h}}[t-1]     \\right]     \\cdot     \\left[       k_{21} \\left(         1 - e^{-\\frac{dt}{\\tau_{\\text{w}}k_{22}}}       \\right) - \\left(         k_{21} - 1       \\right)       \\cdot       \\left(         1 - e^{-\\frac{dt}{\\tau_{\\text{\\rm o}}/k_{22}}}       \\right)     \\right], \\] <p>where:</p> <ul> <li>\\(\\Delta\\theta_{\\text{h}}[t]\\): hot-spot temperature rise at time step t;</li> <li>\\(\\Delta\\theta_{\\text{h}}[t-1]\\): hot-spot temperature rise at the previous time step;</li> <li>\\(H\\): hot-spot factor;</li> <li>\\(gr\\): winding-oil gradient (from the temperature-rise-test);</li> <li>\\(K[t]\\): load level as a percentage of nominal at time step t;</li> <li>\\(y\\): winding exponent;</li> <li>\\(k_{21}\\): winding constant;</li> <li>\\(k_{22}\\): winding constant;</li> <li>\\(dt\\): time step size in minutes;</li> <li>\\(\\tau_{\\text{w}}\\): winding time constant;</li> <li>\\(\\tau_{\\text{\\rm o}}\\): oil time constant.</li> </ul> <p>Similar to the equation for the top-oil temperature, the temperature rise at the previous time step is used as the starting point for the calculation. In the middle section, the difference between the rise at the previous time step and the rise to which the hot-spot converges under current conditions is determined. The right part of the formula represents the delaying effect. In this case, the delaying effect consists of two parts:</p> <ul> <li>The winding effect  indicates the inertia with which the windings themselves heat up (without the influence of the oil).</li> <li>The oil effect A slowing effect caused by the large thermal mass of the oil surrounding the windings.</li> </ul> <p>When the hot-spot temperature rise and the top-oil temperature at time t are known, the hot-spot temperature can simply be determined as:</p> \\[ \\theta_{\\text{h}}[t] = \\theta_{\\text{\\rm o}}[t] + \\Delta\\theta_{\\text{h}}[t] \\] <p>The mentioned equations have a memory up to 1 time step back in time. This means that for a given load profile and ambient temperature profile, the temperature profile of the top-oil and hot-spot are calculated sequentially.</p>"},{"location":"theoretical_documentation/model_improvements/","title":"Potential model improvements","text":""},{"location":"theoretical_documentation/model_improvements/#potential-model-improvements","title":"Potential model improvements","text":"<p>Our team is continuously working on improving the model. Below some potential model improvements are described.</p>"},{"location":"theoretical_documentation/model_improvements/#model-accuracy-at-larger-timestep-sizes","title":"Model accuracy at larger timestep sizes","text":"<p>Currently, we trust the accuracy of the model, as long as a time step size of 15 minutes or smaller are used for the input profiles. Larger time step sizes could potentially cause issues with the hotspot temperature modelling. Note that this model is designed to work specifically for a constantly varying load profile, as is expected to appear in real-life situations. When modelling different scenario's, such as step profiles, it is known that this model might not perform accurately. We are currently looking into a solution for these accuracy and stability issues.</p>"},{"location":"theoretical_documentation/model_improvements/#variable-cooling-stage-for-onaf-transformers","title":"Variable cooling stage for ONAF transformers","text":"<p>Currently, our model is only able to model an ONAF transformer as if the fans are always on. In reality the fans can be turned on only at a certain temperature, even in multiple stages. To take this into account, it is proposed to allow parameters that are dependent on ONAN/ONAF cooling dependent on top-oil temperature. When this temperature reaches a certain threshold, the parameters will gradually shift to the ONAF values.</p>"},{"location":"theoretical_documentation/model_improvements/#tap-dependent-load-losses","title":"Tap-dependent load-losses","text":"<p>Only a single value for load losses is used in the thermal model. It is possible, however, to make this dependent on the tap position that the transformer is in at that moment. This will make the loss calculation slightly more accurate, which also means a more accurate thermal model.</p>"},{"location":"theoretical_documentation/model_improvements/#influence-of-the-installation-condition-outdoor-vs-indoor-temperature","title":"Influence of the installation condition; outdoor vs. indoor temperature","text":"<p>The loadability of an asset is largely determined by the environmental condition. Currently there is no accurate method to deal with the influence of the installation condition on the temperature of the transformer. Some research could prove useful for modelling for example indoor transformers more accurately.</p>"},{"location":"theoretical_documentation/overview/","title":"Overview","text":""},{"location":"theoretical_documentation/overview/#overview","title":"Overview","text":"<p>The theoretical documentation provides a slightly more in-depth review of the workings of the thermal transformer model. On the following pages more information can be found:</p> <ul> <li>Transformer definition: General introduction to transformers.</li> <li>Model description: introduction to the thermal modelling of transformers and the equations used in the package.</li> <li>Thermal limits: definitions of thermal limits as prescribed by the loading guide.</li> <li>Model input: Detailed descriptions of all the transformer specifications needed for thermal modelling.</li> <li>Hot-spot factor calibration: method for determining the hot-spot factor when unknown.</li> <li>Potential model improvements: Ideas for increasing model accuracy that have not yet been implemented.</li> </ul> <p>Relevant standards:</p> <ul> <li>IEC 60076-1: Power transformers - General;</li> <li>IEC 60076-2: Power transformers - Temperature rise for liquid-immersed transformers;</li> <li>IEC 60076-7: Power transformers - Loading guide for mineral-oil-immersed power transformers;</li> <li>IEC 60214: On-load tap-changers;</li> <li>IEC 60137: Insulated bushings for alternating voltages above 1000 V.</li> </ul>"},{"location":"theoretical_documentation/temperature_limits/","title":"Thermal limits","text":""},{"location":"theoretical_documentation/temperature_limits/#thermal-limits","title":"Thermal limits","text":"<p>When modelling the hot-spot and top-oil temperature, it is also important to know what temperatures are considered acceptable. Below, a brief description can be found of different temperatures prescribed by the loading guide.</p>"},{"location":"theoretical_documentation/temperature_limits/#static-loadability","title":"Static loadability","text":"<p>In the standards (IEC 60076-1 paragraph 4.2 &amp; IEC 60076-2 Table 1), temperature limits are described for the environment, oil, and windings that must not be exceeded under continuous load with the assigned power.</p> <ul> <li>Ambient temperature:</li> <li>Always between -25\u00b0C and +40\u00b0C;</li> <li>The average temperature in the hottest month is less than +30\u00b0C;</li> <li>The annual average does not exceed +20\u00b0C.</li> <li>Transformer temperature:</li> <li>The top-oil temperature rise is less than 60 Kelvin;</li> <li>The average winding temperature rise is less than 65 Kelvin;</li> <li>The hot-spot temperature is less than:<ul> <li>Normal paper: 98\u00b0C (78 Kelvin temperature rise);</li> <li>Thermally Upgraded Paper (TUP): 110\u00b0C (90 Kelvin temperature rise).</li> </ul> </li> </ul>"},{"location":"theoretical_documentation/temperature_limits/#cyclic-loadability","title":"Cyclic loadability","text":"<p>In the loading guide, guidelines are given regarding cyclic loadability (IEC 60076-7, chapter 7, table 2). A distinction is made between:</p> <ul> <li> <p>Normal cyclic loadability: a loadability that can always be maintained   with a cyclic profile.</p> </li> <li> <p>Limit top-oil temperature: 105 \u00b0C</p> </li> <li>Limit hot-spot temperature: 120 \u00b0C</li> <li> <p>Limit current load: 150% (&lt; 100MVA), 130% (&gt; 100 MVA)</p> </li> <li> <p>Long-term emergency load: a loadability that can be maintained for   several days with a cyclic profile.</p> </li> <li>Limit top-oil temperature: 115 \u00b0C</li> <li>Limit hot-spot temperature: 140 \u00b0C</li> <li> <p>Limit current load: 180% (&lt; 10MVA), 150% (10 - 100 MVA) and 130% (&gt; 100 MVA)</p> </li> <li> <p>Short-term emergency load: a loadability that can be maintained for   several hours with a cyclic profile.</p> </li> <li>Limit top-oil temperature: 115 \u00b0C</li> <li>Limit hot-spot temperature: 160 \u00b0C</li> <li>Limit current load: 200% (&lt; 10MVA), 180% (10 - 100 MVA) and 150% (&gt; 100 MVA)</li> </ul>"},{"location":"theoretical_documentation/transformer_definition/","title":"Transformer definition","text":""},{"location":"theoretical_documentation/transformer_definition/#transformer-definition","title":"Transformer definition","text":"<p>Transformers connect the grids of different voltage levels and vector groups with each other. This is achieved by magnetically coupling the windings of different voltage levels. These windings are housed within the transformer casing, along with a magnetic core, and are shielded with oil and paper mass. This provides both electrical insulation and thermal conduction for the windings.</p> <p></p> <p>A power transformer surrounded by a concrete blasting wall.</p> <p>Within the term \"Transformer,\" a distinction can be made between power transformers and distribution transformers. Power transformers form the link between high voltage networks (typically 50 kV and higher) and medium voltage networks (typically around 10 to 20 kV). The Loading Guide distinguishes between small, medium, and large transformers (IEC 60076-7, chapter 3). Small (distribution) transformers have a nominal power up to 10 MVA, medium (power) transformers up to 100 MVA, and large (power) transformers of more than 100 MVA.</p> <p>Distribution transformers form the link between medium voltage networks and low voltage networks. This type of transformer is much smaller than power transformers.</p> <p>Power transformers can be found at substations, where the conversion from high to medium voltage takes place. Typically, there are around three power transformers per substation that collectively form the link between high voltage and medium voltage.</p>"}]}